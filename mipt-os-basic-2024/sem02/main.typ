
#import "@preview/polylux:0.3.1": *
#import "@preview/cetz:0.2.2"
#import "../theme/theme.typ": *
#import "./utils.typ": *
#import "./floats.typ": *
#import "./encodings.typ"

#show: theme

#title-slide[
    #align(horizon + center)[
      = –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ

      –ê–ö–û–°, –ú–§–¢–ò

      19 —Å–µ–Ω—Ç—è–±—Ä—è, 2024
    ]
  ]

#show: enable-handout

#slide(header: [–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞], place-location: center+horizon)[
  #draw-number-bits(137)
]

#slide(header: [–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤ C])[
  - #codebox(lang: "c", "char") : *1 –±–∞–π—Ç* (–∏–ª–∏ #codebox(lang: "c", "CHAR_BIT") –±–∏—Ç) –¥–∞–Ω–Ω—ã—Ö;
  - #codebox(lang: "c", "short") –∏ #codebox(lang: "c", "int") : –Ω–µ –º–µ–Ω–µ–µ *16 –±–∏—Ç* –¥–∞–Ω–Ω—ã—Ö;
  - #codebox(lang: "c", "long") : –Ω–µ –º–µ–Ω–µ–µ *32 –±–∏—Ç* –¥–∞–Ω–Ω—ã—Ö;
  - #codebox(lang: "c", "long long") : –Ω–µ –º–µ–Ω–µ–µ *64 –±–∏—Ç* –¥–∞–Ω–Ω—ã—Ö.

  == –¢–∏–ø—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã (#codebox(lang: "c", "#include <stdint.h>")):

  - #codebox(lang: "c", "int8_t") –∏ #codebox(lang: "c", "uint8_t") : —Å—Ç—Ä–æ–≥–æ *8 –±–∏—Ç*;
  - #codebox(lang: "c", "int16_t") –∏ #codebox(lang: "c", "uint16_t") : —Å—Ç—Ä–æ–≥–æ *16 –±–∏—Ç*;
  - #codebox(lang: "c", "int32_t") –∏ #codebox(lang: "c", "uint32_t") : —Å—Ç—Ä–æ–≥–æ *32 –±–∏—Ç–∞*;
  - #codebox(lang: "c", "int64_t") –∏ #codebox(lang: "c", "uint64_t") : —Å—Ç—Ä–æ–≥–æ *64 –±–∏—Ç–∞*.
]

#slide(header: [–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∑–Ω–∞–∫–æ–≤—ã–µ —á–∏—Å–ª–∞], background-image: none)[
  #place(center+horizon)[
    #draw-number-bits(-23, signed: true)
  ]

  #place(bottom)[
    #set list(marker: none)
    - #colbox(color: gray)[‚ö†Ô∏è] : –õ—é–±–æ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å #codebox("1") –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç;
    - #colbox(color: gray)[‚ö†Ô∏è] : –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–Ω–∞–∫–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–µ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–º.
  ]
]

#slide(header: [–ó–Ω–∞–∫–æ–≤—ã–µ –∏ –±–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ —Ç–∏–ø—ã –≤ C], background-image: none)[
  - #codebox(lang: "c", "char") : *–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º*.
  - #codebox(lang: "c", "short") , #codebox(lang: "c", "int") , #codebox(lang: "c", "long") –∏ #codebox(lang: "c", "long long") : –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é *–∑–Ω–∞–∫–æ–≤—ã–µ*;
  - –õ—é–±–æ–π –∏–∑ —Ç–∏–ø–æ–≤ –≤—ã—à–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
    - *–ó–Ω–∞–∫–æ–≤—ã–º* (–Ω–∞–ø—Ä., #codebox(lang: "c", "signed char"));
    - *–ë–µ–∑–∑–Ω–∞–∫–æ–≤—ã–º* (–Ω–∞–ø—Ä., #codebox(lang: "c", "unsigned int")).
  
  #uncover((beginning: 2))[
    == –¢–∏–ø—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã (#codebox(lang: "c", "#include <stdint.h>")):

    - #codebox(lang: "c", "int16_t") : *–∑–Ω–∞–∫–æ–≤–æ–µ* 16-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ;
    - #codebox(lang: "c", "uint16_t") : *–±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ* 16-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ (#codebox("u") –≤ –Ω–∞—á–∞–ª–µ –æ—Ç —Å–ª–æ–≤–∞ #codebox(lang: "c", "unsigned"));
  ]

  #uncover((beginning: 3))[
    #colbox(color: red)[‚ö†Ô∏è] : –ó–Ω–∞–∫–æ–≤—ã–µ —Ç–∏–ø—ã *–Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–ø–æ–ª–Ω—è—Ç—å* - –≤ –°–∏ —ç—Ç–æ UB. –ë–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ -- –º–æ–∂–Ω–æ.
  ]
]

#slide(header: [–ö–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏–ø—ã?], place-location: horizon)[
  
  = #codebox(lang: "c", "(uint16_t) 19847 = ")
  #draw-short(19847, endian: "big")

  #uncover((beginning: 2))[
    = –ù–µ –±—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–∫–æ–π —Å—Ö–µ–º–æ–π?...
  ]
]

#slide(header: [–ß—Ç–æ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫?], background-image: none, place-location: horizon)[

  #set text(size: 25pt)
  #code(numbers: true)[```c
    int main() {
      uint64_t my_long = 42;

      printf("%d\n", &my_long); // –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç?
    }
  ```]  
]

#slide( place-location: horizon)[
  
  #table(
    columns: 2,
    stroke: none,
    codebox(lang: "c", "uint8_t"),
    draw-simple-bits(endian: "big", 8),
    codebox(lang: "c", "uint16_t"),
    draw-simple-bits(endian: "big", 16),
    codebox(lang: "c", "uint32_t"),
    draw-simple-bits(endian: "big", 32),
    codebox(lang: "c", "uint64_t"),
    draw-simple-bits(endian: "big", 64),
  )

  #let theme = cell-color(base-color: blue)

  #colbox(color: gray)[‚ö†Ô∏è] : *–ú–ª–∞–¥—à–∏–π
  #box(
    fill: theme.background-color, inset: 7pt, stroke: 1pt + theme.stroke-color, baseline: 0.1em + 5pt,
  )[
    #set text(fill: theme.text-color)
    —Å–∏–Ω–∏–π
  ]
  –±–∞–π—Ç –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö*.
]

#slide(header: [–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤], background-image: none, place-location: horizon)[

  #text(size: 25pt, {
    code(numbers: true)[```c
      uint8_t a_byte = 42;

      uint16_t a_16b = a_byte; // –ü–µ—Ä–µ–Ω–µ—Å—ë—Ç 42 –≤–æ –≤—Ç–æ—Ä–æ–π –±–∞–π—Ç
      uint32_t a_32b = a_byte; // –ü–µ—Ä–µ–Ω–µ—Å—ë—Ç 42 –≤ —á–µ—Ç–≤—ë—Ä—Ç—ã–π –±–∞–π—Ç
      uint64_t a_64b = a_byte; // –ü–µ—Ä–µ–Ω–µ—Å–µ—Ç 42 –≤ –≤–æ—Å—å–º–æ–π –±–∞–π—Ç
    ```]
  })

  #colbox(color: gray)[‚ö†Ô∏è] : –í —Å—Ö–µ–º–µ Big-Endian *–∫–∞–∂–¥—ã–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∫–∞—Å—Ç* —Ç—Ä–µ–±—É–µ—Ç *–º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ –±–∞–π—Ç*:
]

#slide(header: [–ß—Ç–æ, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –±–∞–π—Ç—ã –Ω–∞–æ–±–æ—Ä–æ—Ç?], place-location: horizon)[
  
  = #codebox(lang: "c", "(uint16_t) 19847 = ")
  #draw-short(19847, endian: "little")
]

#slide(header: [–ß—Ç–æ, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –±–∞–π—Ç—ã –Ω–∞–æ–±–æ—Ä–æ—Ç?], place-location: horizon)[
  
  #table(
    columns: 2,
    stroke: none,
    codebox(lang: "c", "uint8_t"),
    draw-simple-bits(8),
    codebox(lang: "c", "uint16_t"),
    draw-simple-bits(16),
    codebox(lang: "c", "uint32_t"),
    draw-simple-bits(32),
    codebox(lang: "c", "uint64_t"),
    draw-simple-bits(64),
  )

  #colbox(color: green)[‚úî] –í —Ç–∞–∫–æ–π —Å—Ö–µ–º–µ (Little-Endian) –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–∞–π—Ç.
]

#slide(background-image: none)[
  #[
    #set list(marker: none)
    == –°—Ö–µ–º–∞ Big-Endian (BE, c–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—à–∏–π –±–∞–π—Ç)

    - #pro() –£–¥–æ–±–Ω–∞—è –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞. –ü–æ—Ä—è–¥–æ–∫ –±–∏—Ç –∫–∞–∫ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –∑–∞–ø–∏—Å–∏;
    - #pro() –ü–æ–∑–≤–æ–ª—è–µ—Ç —É—Å–∫–æ—Ä—è—Ç—å #codebox("strcmp") –∏ #codebox("memcmp") ;
    - #con() –ò–Ω–æ–≥–¥–∞ —Å–ª–æ–∂–Ω–µ–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—å —Ç–∏–ø—ã.

    == –°—Ö–µ–º–∞ Little-Endian (LE, c–Ω–∞—á–∞–ª–∞ –º–ª–∞–¥—à–∏–π –±–∞–π—Ç)

    - #pro() –õ–µ–≥–∫–æ –∫–∞—Å—Ç—É–µ—Ç—Å—è —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ;
    - #con() –ß—É—Ç—å-—á—É—Ç—å –ª–æ–º–∞–µ—Ç –º–æ–∑–≥.
  ]

  == –ö —á–µ–º—É –ø—Ä–∏—à–ª–∏ –ª—é–¥–∏:

  - x86 –≤—Å–µ–≥–¥–∞ LE. ARM –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é LE, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.

  - –í Big-Endian –≤–≤–æ–¥—è—Ç—Å—è –¥–≤–æ–∏—á–Ω—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã: #codebox(lang: "c", "0b1000000000000000 == 32768") , –∞ –Ω–µ #codebox(lang: "c", "128");
  
  - –ê –µ—â–µ Big-Endian –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–µ—Ç–∏.
]

#focus-slide[
  #text(size: 40pt)[*–î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞*]
]

#slide(header: [–î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞], place-location: center + horizon)[
  #draw-number-bits(fractional: 3, 10.675)

  = –ù–µ—Å–∫–æ–ª—å–∫–æ –º–ª–∞–¥—à–∏—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ –º–æ–∂–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å. –ü–æ–ª—É—á–∏—Ç—Å—è #codebox("fixed-point").
]

#slide(header: [–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ #codebox("fixed-point")], place-location: horizon)[
  #[
    #set list(marker: none)
    - #con() –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ *–Ω—É–∂–Ω–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–æ–±–Ω—ã—Ö –±–∏—Ç*.
    - #con() –ü—Ä–∏ –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏–±–æ *—Ç–µ—Ä—è–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å*, –ª–∏–±–æ *–±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç—Å—è*.
  ]

  #uncover((beginning: 2))[
    == –ö —á–µ–º—É –ø—Ä–∏—à–ª–∏ –ª—é–¥–∏:
    
    - –î–∞–≤–∞–π—Ç–µ *–º–µ–Ω—è—Ç—å —á–∏—Å–ª–æ –¥—Ä–æ–±–Ω—ã—Ö –±–∏—Ç –Ω–∞ —Ö–æ–¥—É*;

    - –í—ã–¥–µ–ª–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∏—Ç –ø–æ–¥ *—Å—á—ë—Ç—á–∏–∫*;

    - –ù–∞–∑–æ–≤—ë–º —ç—Ç–æ #emoji.sparkles #codebox("floating-point") #emoji.sparkles.
  ]
]

#slide(header: [#codebox("floating-point") –≤ IEEE 754], background-image: none)[
  // #draw-float("FLOAT_MIN", 3, 4, float: float-from-bits((false, false, false, false, false, false, false, true), 3, 4))
  
  // #draw-float("–ü–æ—á—Ç–∏ 1", 3, 4, float: float-from-bits((false, false, true, true, false, false, false, true), 3, 4))

  #place(center + horizon, {
    let float = float-from-string(str(calc.pi), 3, 4)
    draw-float-scheme([*$pi approx #float-value(float)$* = ], float) 
  })

  #place(center + bottom)[
    #set text(size: 25pt)
    (*–í–æ–æ–±—â–µ, –≤ IEEE 754 –º–∏–Ω–∏–º—É–º 16 –±–∏—Ç, –Ω–æ —Å—É—Ç—å —Ç–∞ –∂–µ*)
  ]
]

#slide(background-image: none, place-location: horizon + center)[
  #set text(size: 30pt)
  üîó #link(
    "https://www.h-schmidt.net/FloatConverter/IEEE754.html",
  )[*–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã #codebox("float")*]
]

#slide(background-image: none, place-location: horizon + center)[
  
  #let float = float-from-string(str(calc.pi), 3, 4)

  #set text(size: 60pt)
  #draw-float-formula(float)

  #set text(size: 25pt)
  *–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –¥–≤–æ–∏—á–Ω–∞—è –∞–Ω–∞–ª–æ–≥–∏—è —ç—Ç–æ–≥–æ:*

  #set text(size: 60pt)
  $1.616255 dot 10^(-35)$
]

#slide(background-image: none)[

  #let scale = 0.8

  #let draw-scale() = {
    cetz.draw.fill(black)

    for i in array.range(-16, 18, step: 2) {
      let x = i * scale

      cetz.draw.circle((x, -0.3), radius: 0.1)
      cetz.draw.content((x - 0.5, -0.5), (x + 0.5, -1.5), padding: 0, {
        align(center + horizon)[
          *#i*
        ]
      })
    }
  }

  = #codebox("fixed-point") (–∑–Ω–∞–∫–æ–≤—ã–π, 8 –±–∏—Ç, 3-–±. –¥—Ä–æ–±—å)
  #cetz.canvas(length: 1cm, {
    draw-scale()
    for i in range(-128, 128) {
      let value = (i / 8) * scale
      cetz.draw.line((value, 0), (value, 1))
    }
  })

  #v(1em)
  = #codebox("floating-point") (3-–±. —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞, 4-–±. –º–∞–Ω—Ç–∏—Å—Å–∞)
  #cetz.canvas(length: 1cm, {
    draw-scale()
    for i in range(256) {
      let float = float-from-bits(get-bit-array(i), 3, 4)
      if not float-is-infinity(float) and not float-is-nan(float) {
        let value = float-value(float) * scale
        cetz.draw.line((value, 0), (value, 1))
      }
    }
  })

  #v(1em)
  #set list(marker: none)
  - #pro() –ú–∞–∫—Å. –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –Ω–∞ $(1, 15)$ —Å—Ç–∞–ª–∞ *3%* –ø—Ä–æ—Ç–∏–≤ *5.6%*;
  - #con() *32 –∏–∑ 256 –∑–Ω–∞—á–µ–Ω–∏–π (12%)* —É—Ö–æ–¥—è—Ç –Ω–∞ —Å–ª—É–∂–µ–±–Ω—ã–µ (#codebox("NaN"), #codebox("Inf")).
]

#slide(header: [–°–ø–µ—Ü. –∑–Ω–∞—á–µ–Ω–∏—è #codebox("floating-point") –≤ IEEE 754], background-image: none)[
  
  #place(horizon + center)[
    #set text(size: 25pt)
    #table(
      columns: 2,
      stroke: none,
      align: (right, center),
      codebox("+Inf"), draw-float-inline(float-infinity(false, 3, 4)),
      codebox("-Inf"), draw-float-inline(float-infinity(true, 3, 4)),
      codebox("qNaN"), draw-float-inline(float-nan(3, 4)),
      codebox("sNaN"), draw-float-inline(float-from-bits((false, true, true, true, false, true, false, false), 3, 4)),
      codebox("0"), draw-float-inline(float-zero(false, 3, 4)),
      codebox("-0"), draw-float-inline(float-zero(true, 3, 4))
    )
  ]

  #place(bottom)[
    - –ü—Ä–∏ –Ω—É–ª–µ–≤–æ–π —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è *–¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º*. –û–Ω –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—à—É—é –µ–¥–∏–Ω–∏—Ü—É –Ω–∞ –Ω–æ–ª—å. –¢–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –±–ª–∏–∑–∫–æ –∫ –Ω—É–ª—é.
  ]
]

#slide(header: [–°–ª–æ–∂–µ–Ω–∏–µ #codebox("floating-point")], place-location: center + bottom, background-image: none)[

  #let float-a-name = "4.5"
  #let float-a = float-from-string(float-a-name, 3, 4)
  #let float-b-name = "-4"
  #let float-b = float-from-string(float-b-name, 3, 4)

  #draw-float-add-slide(float-a-name, float-a, float-b-name, float-b)
]

#slide(header: [–°–ª–æ–∂–µ–Ω–∏–µ #codebox("floating-point") —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—è–¥–∫–æ–≤], place-location: center + bottom, background-image: none)[

  #let float-a-name = "1.625"
  #let float-a = float-from-string(float-a-name, 3, 4)
  #let float-b-name = "4.5"
  #let float-b = float-from-string(float-b-name, 3, 4)

  #draw-float-add-slide(float-a-name, float-a, float-b-name, float-b)
]

  #slide(header: [–î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ #codebox("floating-point")], place-location: center + bottom, background-image: none)[

  #let float-a-name = "0.5"
  #let float-a = float-from-string(float-a-name, 3, 4)
  #let float-b-name = "-0.03125"
  #let float-b = float-from-string(float-b-name, 3, 4)

  #draw-float-add-slide(float-a-name, float-a, float-b-name, float-b)
]

#slide(header: [–£–º–Ω–æ–∂–µ–Ω–∏–µ #codebox("floating-point")], place-location: center + bottom, background-image: none)[

  #let float-a = float-from-string(str(calc.pi), 3, 4)
  #let float-a-name = math.pi
  #let float-b = float-from-string(str(calc.e), 3, 4)
  #let float-b-name = [e]

  #draw-float-mul-slide(float-a-name, float-a, float-b-name, float-b)
]


#slide(header: [–†–∞–∑–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö #codebox("floating-point")], place-location: horizon + center)[

  #set text(size: 35pt)

  #let head(content) = {
    text(size: 30pt)[*#content*]
  }

  #let bits(content) = {
    text(size: 30pt)[#content]
  }

  #table(
    columns: 3,
    stroke: none,
    align: (right, center, center),
    inset: (x: 30pt, y: 15pt),
    table.header(
      head([]), head([–≠–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞]), head([–ú–∞–Ω—Ç–∏—Å—Å–∞])
    ),
    table.hline(),
    codebox(lang: "c", "float"), bits([*8* –±–∏—Ç]), bits([*23* –±–∏—Ç–∞]),
    codebox(lang: "c", "double"), bits([*11* –±–∏—Ç]), bits([*52* –±–∏—Ç–∞])
  )
]

#focus-slide[
  #only("1")[
    #text(size: 40pt)[*–ù—õ–â–è–Ñ—õ–á—ô–è*]
  ]
  #only("2")[
    #text(size: 40pt)[*–ö–æ–¥–∏—Ä–æ–≤–∫–∏*]
  ]
]

#slide(header: [Further reading], background-image: none, place-location: horizon + center)[
  #set text(size: 30pt)
  üîó #link(
    "https://dl.acm.org/doi/pdf/10.1145/93548.93557?download=false",
  )[*–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ #codebox("float")*]

  üîó #link(
    "https://dl.acm.org/doi/pdf/10.1145/93548.93559?download=false",
  )[*–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å #codebox("float") –≤ —Å—Ç—Ä–æ–∫—É*]
]

#let special-char-box(color: rgb(60, 60, 60), char) = {
  box(
    baseline: 0.1em + 5pt, inset: (x: 5pt, y: 5pt), radius: 3pt, fill: color,
  )[
    #set text(size: 15pt, baseline: -1pt, fill: white)
    #raw(char)
  ]
}

#let draw-ascii-table(codepage: none) = {
  let special-chars = ("NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "BS", "TAB", "LF", "VT", "FF", "CR", "SO", "SI", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "EM", "SUB", "ESC", "FS", "GS", "RS", "US")

  let rows = if codepage == none { 8 } else { 16 }

  table(
    columns: array.range(17).map(i => 42pt),
    rows: array.range(rows + 1).map(i => 24pt),
    inset: 0pt,
    stroke: none,
    [], ..array.range(16).map(num => raw("0x" + str(num, base: 16))),
    table.hline(),
    table.vline(x: 1),
    ..array.flatten(array.range(rows).map((y) => {
      let row = "0x" + str(y * 16, base: 16)
      if y == 0 {
        row += "0"
      }
      return (raw(row), ..array(range(16)).map((x) => {
        let code = y * 16 + x
        if code < special-chars.len() {
          special-char-box(special-chars.at(code))
        } else if code == 32 {
          raw("‚ê£")
        } else if code == 127 {
          special-char-box("DEL")
        } else if code >= 128 {
          let char = codepage.at(code - 128)
          if(type(char) == str) {
            raw(char)
          } else {
            special-char-box(color: char.at("color", default: rgb(60, 60, 60)), char.name)
          }
        } else {
          let str = str.from-unicode(code)
          raw(str)
        }
      }))
    }))
  )
}

#slide(place-location: horizon + center, background-image: none)[

  #draw-ascii-table()

  #align(center)[
    *–≠—Ç–æ ASCII-—Ç–∞–±–ª–∏—Ü–∞.*

    #[*A*]merican #[*S*]tandard #[*C*]ode for #[*I*]nformation #[*I*]nterchange

    –ö—Ä–∞—Ç–Ω–æ —Å—Ç–∞—Ä—à–µ –∫–∞–∂–¥–æ–≥–æ –≤ —ç—Ç–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  ]
]

#slide(place-location: horizon + center, background-image: none)[
  #set block(above: 14pt, below: 14pt)
  
  #draw-ascii-table(codepage: encodings.cp1251)

  *CP1251 - –ù–∞—à–∞, —Ä–æ–¥–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞.*
]

#slide(place-location: horizon + center, background-image: none)[
  #set block(above: 14pt, below: 14pt)

  #draw-ascii-table(codepage: encodings.cp1256)

  *CP1256 - –∞—Ä–∞–±—Å–∫–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞.*
]

#slide(place-location: horizon + center, background-image: none)[
  #set block(above: 14pt, below: 14pt)

  #draw-ascii-table(codepage: encodings.cp437)

  *CP437 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ IBM PC.* –¢–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ Alt Codes
]

#slide(header: [–ö–æ–¥–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 437], place-location: horizon + left)[
  - #link("https://en.wikipedia.org/wiki/Code_page_437#Internationalization")[*–ü–æ–∫—Ä—ã–≤–∞–µ—Ç –∞–ª—Ñ–∞–≤–∏—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–æ–≤*]: –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –ù–µ–º–µ—Ü–∫–æ–≥–æ –∏ –®–≤–µ–¥—Å–∫–æ–≥–æ;

  - –°–æ–¥–µ—Ä–∂–∏—Ç *—Å–∏–º–≤–æ–ª—ã –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç* (¬¢, ¬£, ¬•, ∆í, ‚Çß);

  - –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å *—Ç–∞–±–ª–∏—á–∫–∏ –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–æ–π*;

  - *–û—á–µ–Ω—å –ø—ã—Ç–∞–µ—Ç—Å—è –±—ã—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π*, –Ω–æ –Ω–µ–ª—å–∑—è –æ–±—ä—è—Ç—å –Ω–µ–æ–±—ä—è—Ç–Ω–æ–µ.
]

#slide(place-location: center + horizon)[

  #box(width: 80%, height: 10cm)[
    #align(center)[
      #set block(above: 18pt, below: 18pt)
      –ï–≥–æ –í–µ–ª–∏—á–µ—Å—Ç–≤–æ

      #text(size: 60pt, weight: "black")[Unicode]
    ]

    #v(2cm)

    #align(left)[
      - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç;
      
      - –°–æ–¥–µ—Ä–∂–∏—Ç *155 063* —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ 10 —Å–µ–Ω—Ç. 2024);

      - –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è;

      - *–ö–∞–∫ –≤–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤–æ –≤—Å–µ–º –ø—Ä–∏–≤—ã—á–Ω—É—é ASCII?*
    ]
  ]
]

#slide(place-location: horizon + center, background-image: none)[
  #set block(above: 14pt, below: 14pt)

  #draw-ascii-table(codepage: encodings.utf8)

  *UTF-8.* –ö–æ–¥–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –æ—Ç 1 –¥–æ 4 –±–∞–π—Ç.
]

#slide(header: [–ö–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8], background-image: none)[

  #let theme = (i, bit) => {
    let color = if bit == "1" { 
      blue 
    } else if bit == "0" { 
      black 
    } else {
      green
    }
    
    cell-color(active: true, base-color: color)
  }

  #let draw-bytes(bytes) = {

    let cell-size = (x: 0.85, y: 1)
  
    box(baseline: 0.3em, {
      cetz.canvas(length: 1cm, {
        for (i, byte) in bytes.split(" ").enumerate() {
          let bit-array = byte.codepoints()

          draw-bits-boxes((8 + 0.15) * i, 0, cell-size, bit-array, theme, (i, bit) => {
            let theme = theme(i, bit)
            let mask = calc.pow(2, bit-array.len() - i - 1)
            set text(weight: "bold", fill: theme.text-color)

            if bit == "*" {
              bit = ""
            }

            [#bit]
          })
        }
      })
    })
  }

  #place(horizon)[
    #draw-bytes("0*******") #h(7pt) -- –û–±—ã—á–Ω—ã–π ASCII-—Å–∏–º–≤–æ–ª (7 –±–∏—Ç, 128 —Å–∏–º–≤–æ–ª–æ–≤)

    #draw-bytes("110***** 10******")

    #draw-bytes("1110**** 10****** 10******")

    #draw-bytes("11110*** 10****** 10****** 10******")
  ]

  #place(bottom)[
    - –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –∫–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞.

    - –í—Å–µ–≥–æ –º–æ–∂–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å *1114111* —Å–∏–º–≤–æ–ª–æ–≤.
  ]
]

#title-slide[
  #place(horizon + center)[
    = –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!
  ]

  #place(
    bottom + center,
  )[
    // #qr-code("https://github.com/JakMobius/courses/tree/main/mipt-os-basic-2024", width: 5cm)

    #box(
      baseline: 0.2em + 4pt, inset: (x: 15pt, y: 15pt), radius: 5pt, stroke: 3pt + rgb(185, 186, 187), fill: rgb(240, 240, 240),
    )[
      üîó #link(
        "https://github.com/JakMobius/courses/tree/main/mipt-os-basic-2024",
      )[*github.com/JakMobius/courses/tree/main/mipt-os-basic-2024*]
    ]
  ]
]

#floats-test()