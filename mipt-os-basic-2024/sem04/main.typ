
#import "@preview/polylux:0.3.1": *
#import "@preview/cetz:0.2.2"
#import "../theme/theme.typ": *
#import "./utils.typ": *

#show: theme

#title-slide[
  #align(horizon + center)[
    = –ê—Å—Å–µ–º–±–ª–µ—Ä (x86)

    –ê–ö–û–°, –ú–§–¢–ò

    03 –æ–∫—Ç—è–±—Ä—è, 2024
  ]
]

#show: enable-handout

#slide(header: [–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ñ–æ–Ω –ù–µ–π–º–∞–Ω–∞], place-location: horizon + center)[
  #cetz.canvas(length: 1cm, {
    let globalBounds = ((-12, 5), (12, -5))
    cetz.draw.content(..globalBounds, [])

    let processorBounds = ((-5,  5),     (5,   -5))
    let aluBounds       = ((-4,  4),     (4,    1.25))
    let cuBounds        = ((-4,  -0.5),  (4,   -4))

    let memBounds       = ((-12,  5),    (-8,  -5))
    let inputBounds     = ((8,    5),    (12,   0.5))
    let outputBounds    = ((8,   -0.5),  (12,  -5))

    let blueBox = (stroke: 3pt + cell-color(palette.at(0)).stroke-color, fill: cell-color(palette.at(0)).background-color, radius: 10pt)

    let blackBox = (stroke: 3pt + cell-color(black).stroke-color, fill: cell-color(black).background-color)

    cetz.draw.rect(..processorBounds, ..blueBox)
    cetz.draw.rect(..aluBounds, ..blackBox)
    cetz.draw.rect(..cuBounds, ..blackBox)
    cetz.draw.rect(..memBounds, ..blueBox)
    cetz.draw.rect(..inputBounds, ..blueBox)
    cetz.draw.rect(..outputBounds, ..blueBox)

    let content(bounds, content) = {
      cetz.draw.content(..bounds)[
        #set align(horizon + center)
        #set text(size: 25pt, weight: "bold")
        #content
      ]
    }

    content(cuBounds)[–£–ø—Ä–∞–≤–ª—è—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ]
    content(aluBounds)[–ê–õ–£]
    content(memBounds)[#rotate(-90deg)[–ü–∞–º—è—Ç—å]]
    content(inputBounds)[#rotate(-90deg)[–í–≤–æ–¥]]
    content(outputBounds)[#rotate(-90deg)[–í—ã–≤–æ–¥]]

    cetz.draw.set-style(mark: (end: ">"), stroke: 10pt + black, fill: none)

    cetz.draw.line((-5.5, -2), (-7.5, -2));
    cetz.draw.line((-7.5, -3), (-5.5, -3));

    cetz.draw.bezier((7.5, 2.5), (6.5, -2), (6, 2.5), (8, -2), mark: none);
    cetz.draw.line((6.5, -2), (5.5, -2));
    cetz.draw.line((5.5, -3), (7.5, -3));

    cetz.draw.line((-0.5, -0.25), (-0.5, 1));
    cetz.draw.line((0.5,  1), (0.5,  -0.25));
  })
]

#slide(background-image: none, place-location: horizon + center)[
  #text(size: 40pt, weight: "bold")[
    üîó #link("https://nandgame.com")[nandgame.com]
  ]
  
  *–ò–≥—Ä–∞ –ø—Ä–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑ —Ä–µ–ª–µ*
]

#slide(background-image: none)[
  = –° —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä?

  #set list(marker: none)
  - #pro() –° *—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏*, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ;
  - #pro() –° *8-, 16-, 32-, 64-–±–∏—Ç–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏* (–∏–Ω–æ–≥–¥–∞ –¥–æ 512 –±–∏—Ç);
  - #pro() –° *–∞–¥—Ä–µ—Å–∞–º–∏ –ø–∞–º—è—Ç–∏* (–æ–ø—è—Ç—å –∂–µ, –≤ –≤–∏–¥–µ —á–∏—Å–µ–ª).
  - #pro() *–°–æ —Å—Ç–µ–∫–æ–º* (—Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–µ–∫ #codebox("sp"), –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ #codebox("push") / #codebox("pop")).

  = –° —á–µ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä?

  - #con() *–°—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–ª–∞—Å—Å—ã, —Å—Ç—Ä–æ–∫–∏* -- –≤—Å—ë —ç—Ç–æ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –Ω–∞–¥ –∞–¥—Ä–µ—Å–∞–º–∏ –ø–∞–º—è—Ç–∏;
  - #con() *–ú–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö*. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.
  - #con() *–§—É–Ω–∫—Ü–∏–∏, –º–µ—Ç–æ–¥—ã, –∏—Å–∫–ª—é—á–µ–Ω–∏—è*. –í—Å—ë, —á—Ç–æ –µ—Å—Ç—å -- —ç—Ç–æ —Å—Ç–µ–∫;

  *–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞* -- —É–º–µ—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
]

#slide(header: [–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è?], background-image: none, context {
  let asm-text = "mov rbx, rax"
  let asm = {
    set text(weight: "semibold", size: 40pt)

    highlight(asm-text, asmcolors-light)
  }
  let asm-width = measure(asm).width.cm()
  let char-width = asm-width / asm-text.len()

  place(center + horizon, {
    cetz.canvas(length: 1cm, {
      let storke-width = 3pt
      cetz.draw.content((-5, 2), (asm-width + 5, 2), {});
      cetz.draw.content((0, 0), (asm-width, 0), asm)
      cetz.draw.set-style(stroke: storke-width)
      let options = (
        char-width: char-width,
      )

      underline(0, 3, 2, content: [
        #semibold([–ú–Ω–µ–º–æ–Ω–∏–∫–∞]) (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
      ], ..options)
      underline(4, 7, 1, content: [
        #semibold([–ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥])
        ], ..options)
      underline(9, 12, 0, content: [
        #semibold([–í—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥])
      ], ..options)
    })
  })

  place(bottom + center, {
    set text(size: 25pt, weight: "semibold")
    [–î–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ #codebox("48 89 C3")]
  })
})

#slide(header: [–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è?], background-image: none, context {
  let asm-text = "lea rax, [rbx + rcx * 2 + 7]"
  let asm = {
    set text(weight: "semibold", size: 40pt)

    highlight(asm-text, asmcolors-light)
  }
  let asm-width = measure(asm).width.cm()
  let char-width = asm-width / asm-text.len()

  place(center + horizon, {
    cetz.canvas(length: 1cm, {
      let storke-width = 3pt
      cetz.draw.content((-5, 2), (asm-width + 5, 2), {});
      cetz.draw.content((0, 0), (asm-width, 0), asm)
      cetz.draw.set-style(stroke: storke-width)
      let options = (
        char-width: char-width,
        content-right-anchor: 20,
      )

      underline(0, 3, 2, content: [
        #semibold([–ú–Ω–µ–º–æ–Ω–∏–∫–∞]) (–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
      ], ..options)
      underline(4, 7, 1, content: [
        #semibold([–ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥])
        ], ..options)
      underline(9, 28, 0, content: [
        #semibold([–í—Å–µ –µ—â–µ –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞–Ω–¥])
      ], ..options)
    })
  })

  place(bottom + center, {
    set text(size: 25pt, weight: "semibold")
    [–î–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ #codebox("48 8D 44 4B 07")]
  })
})

#slide(header: [–ù–∞–±–æ—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π], background-image: none)[
  #set text(size: 20pt)
  #place(horizon)[
    == #codebox("x86 (x86_64)")

    - –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–∞ *–Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö* / –Ω–æ—É—Ç–±—É–∫–∞—Ö;
    
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç *CISC* - Complex Instruction Set.

    == #codebox("arm(v1 ... v8)")

    - –ñ–∏–≤—ë—Ç –Ω–∞ *–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤*, —Ä–æ—É—Ç–µ—Ä–æ–≤, –≤–æ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö;

    - C–µ–π—á–∞—Å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ (Apple M1, Snapdragon X);

    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç *RISC* - Reduced Instruction Set.
  ]

  #place(bottom + center)[
    –ï—â–µ –µ—Å—Ç—å MIPS –∏ PowerPC , –Ω–æ –∏—Ö –º—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω–µ–º.
  ]
]

#slide(background-image: none)[
  #let asm(str) = codebox(lang: "asm", str)

  #let codeboxes(arr) = {
    arr.split(" ").map(a => codebox("0x"+ a)).join(" ")
  }

  #let table-settings = (
    columns: (12cm, 10cm), 
    align: left, 
    inset: (x: 20pt, y: 7pt),
    stroke: (x, y) => {
      if(x == 0) {
        return (right: 2pt + gray)
      }
      return none
    }
  )

  #let asmtable(arr) = {
    arr.map(a => {
      (
        [#lightasm(a.at(0))], 
        {
          set text(fill: asmcolors-light.number, weight: "semibold")
          raw(a.at(1).split(" ").map(a => "0x" + a).join(" "))
        }
      )
    }).flatten()
  }

  #set text(size: 25pt)
  === #codebox("CISC") : –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—É—é –¥–ª–∏–Ω—É

  #table(..table-settings,
    ..asmtable((
      ("nop", "90"),
      ("mov rbx, rax", "48 89 C3"),
      ("cmovg rax, r15", "49 0F 4F C7"),
    ))
  )
  
  === #codebox("RISC") : –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞–≤–Ω–æ–¥–ª–∏–Ω–Ω—ã–µ

  #table(..table-settings,
    ..asmtable((
      ("nop", "1F 20 03 D5"),
      ("mov x1, x0", "E0 03 01 AA"),
      ("csel x0, x15, x0, gt", "E0 C1 80 9A"),
    ))
  )
]

#focus-slide[
  #text(size: 40pt)[*x86*]
]

#let register(name) = {
  set text(size: 1.2em, fill: asmcolors-light.register, weight: "bold")
  raw(name)
}

#let mnemonic(name) = {
  set text(size: 1.2em, fill: asmcolors-light.instruction, weight: "bold")
  raw(name)
}

#let impossible-register() = {
  let pat = pattern(size: (25pt, 25pt))[
    #let stroke = 2pt + color.gray
    #place(line(stroke: stroke, start: (0%, 0%), end: (100%, 100%)))
    #place(line(stroke: stroke, start: (-100%, 0%), end: (100%, 200%)))
    #place(line(stroke: stroke, start: (0%, -100%), end: (200%, 100%)))
  ]
  box(width: 100%, height: 100%, fill: pat)
}

#let register-size(content) = {
  set text(weight: "bold", fill: asmcolors-light.instruction)
  set align(right)
  raw(content)
}

#let regtable-settings = (
  columns: (4cm,) + (2.5cm,) * 8 + (4cm,),
  rows: (0.9cm) * 2,
  inset: (x, y) => {
    if x == 0 {
      16pt
    } else {
      8pt
    }
  },
  align: center,
  stroke: (x, y) => {
    if x > 0 and x <= 8 {
      2pt + black
    } else {
      none
    }
  }
)

#slide(background-image: none)[
  #set text(weight: "semibold")
  #table(
    inset: (x, y) => {
      if y == 0 { (bottom: 18pt) }
      else if (y == 10) { (top: 18pt, bottom: 18pt)  }
      else { 8pt }
    },
    columns: 2,
    align: (x, y) => {
      if y == 0 or y == 10 { left }
      else if x == 0 { right }
      else { left }
    },
    stroke: (x, y) => {
      if x == 1 {
        return (left: 3pt + gray)
      } else {
        none
      }
    },

    table.cell(
      colspan: 2,
      [= 16-–±–∏—Ç–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è]
    ),
    register("ax"), [Accumulator],
    register("bx"), [Base index (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏)],
    register("cx"), [Counter],
    register("dx"), [Accumulator extension],
    [#register("r8w") - #register("r15w")], [–£ —ç—Ç–∏—Ö –¥–∞–∂–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä—ã],
    register("sp"), [Stack pointer],
    register("bp"), [Base pointer],
    register("si"), [Source index],
    register("di"), [Destination index],

    table.cell(
      colspan: 2,
      [= –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ 16-–±–∏—Ç–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã:],
    ),

    register("ip"), [Instruction pointer],
    register("flags"), [–°–∫—Ä—ã—Ç—ã–π —Ä–µ–≥–∏—Å—Ç—Ä —Ñ–ª–∞–≥–æ–≤: –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—ë—Ç–Ω–æ—Å—Ç—å, –∑–Ω–∞–∫, ...],
  )
]

#slide(header: [–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ -- #register("ax")])[
  #place(horizon + center)[
    #set text(size: 25pt)
    #table(
      ..regtable-settings,
      register-size("uint64_t"),
      table.cell(colspan: 8, register("rax")),
      [],
      register-size("uint32_t"),
      table.cell(colspan: 4, impossible-register()),
      table.cell(colspan: 4, register("eax")),
      [],
      register-size("uint16_t"),
      table.cell(colspan: 6, impossible-register()),
      table.cell(colspan: 2, register("ax")),
      [],
      register-size("uint8_t"),
      table.cell(colspan: 6, impossible-register()),
      table.cell(colspan: 1, register("ah")),
      table.cell(colspan: 1, register("al")),
      []
    )
    #semibold([
      –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç #register("bx"), #register("cx"), #register("dx")
      
      #register("sp"), #register("bp"), #register("si"), –∏ #register("di"), –Ω–µ –∏–º–µ—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å #register("h") –≤ –∫–æ–Ω—Ü–µ.

      #register("ip") –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ #register("eip") –∏ #register("rip").
    ])
  ]
]

#slide(header: [–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ -- #register("r10")])[
  #place(horizon + center)[
    #set text(size: 25pt)
    #table(
      ..regtable-settings,
      register-size("uint64_t"),
      table.cell(colspan: 8, register("r10")),
      [],
      register-size("uint32_t"),
      table.cell(colspan: 4, impossible-register()),
      table.cell(colspan: 4, register("r10d")),
      [],
      register-size("uint16_t"),
      table.cell(colspan: 6, impossible-register()),
      table.cell(colspan: 2, register("r10w")),
      [],
      register-size("uint8_t"),
      table.cell(colspan: 7, impossible-register()),
      table.cell(colspan: 1, register("r10b")),
      []
    )
    #semibold([–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç #register("r8") ... #register("r15")])
  ]
]

#slide(background-image: none)[
  #set text(size: 25pt)
  #let header(content) = {
    box(inset: (x: 0pt, y: 15pt))[
      #text(size: 37pt, weight: "bold")[
        #content
      ]
    ]
  }
  #let smalltext(content) = {
    text(size: 16pt, weight: "bold", content)
  }
  #table(
    columns: (14cm, 14cm),
    inset: (x: 20pt, y: 5pt),
    stroke: (x, y) => {
      if x == 0 and y != 0 and y != 4 {
        (right: 2pt + black)
      }
      none
    },
    align: (col, row) => {
      if row == 0 { center }
      else if row < 4 { left }
      else { left + top }
    },
    header([*Intel*]), header([*AT&T*]),
    lightasm("mov rax, 5"), lightasm("movq $5, %rbx"),
    lightasm("lea eax, [ecx + ebx * 2 + 7]"), lightasm("leal 7(%ecx, %ebx, 2), %eax"),
    lightasm("and DWORD PTR [eax], 7"), lightasm("andl $7, (%eax)"),
    v(0.5em), [],
    smalltext[
      - –ü–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤: #codebox("–∫—É–¥–∞") #sym.arrow.l #codebox("–æ—Ç–∫—É–¥–∞");
      - –ê–¥—Ä–µ—Å–∞: #codebox("[base + index * scale + offset]")
      - –ë–∏—Ç–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±—ã—á–Ω–æ —É–≥–∞–¥—ã–≤–∞–µ—Ç—Å—è;
      - –ï—Å–ª–∏ –Ω–µ —É–≥–∞–¥—ã–≤–∞–µ—Ç—Å—è, —Ç–æ –µ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–∏–≤—ã:
        - #codebox("BYTE PTR") - 1 –±–∞–π—Ç
        - #codebox("WORD PTR") - 2 –±–∞–π—Ç–∞
        - #codebox("DWORD PTR") - 4 –±–∞–π—Ç
        - #codebox("QWORD PTR") - 8 –±–∞–π—Ç
    ], smalltext[
      - –ü–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞–Ω–¥–æ–≤: #codebox("–æ—Ç–∫—É–¥–∞") #sym.arrow.r #codebox("–∫—É–¥–∞")
      - –ê–¥—Ä–µ—Å–∞: #codebox("offset(base, index, scale)")
      - –ë–∏—Ç–Ω–æ—Å—Ç—å —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–º:
        - #codebox("b") - 1 –±–∞–π—Ç
        - #codebox("w") - 2 –±–∞–π—Ç–∞
        - #codebox("l") - 4 –±–∞–π—Ç
        - #codebox("q") - 8 –±–∞–π—Ç
      - –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º #text(size: 1.2em, fill: asmcolors-light.register)[#raw("%")], –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —á–∏—Å–ª–æ–º #text(size: 1.2em, fill: asmcolors-light.number)[#raw("$")]
    ])
]

#slide(header: [–ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏], background-image: none)[
  #set par(leading: 0pt)
  #set block(spacing: 5pt)
  #set list(marker: none)
  #let instr(content) = {
    box(width: 100%, stroke: (right: 3pt + gray), inset: (right: 10pt, y: 3pt), content)
  }
  #table(
    columns: (3cm, auto),
    align: (col, row) => {
      if col == 0 { center }
      else { left + top }
    },
    inset: ((right: 10pt, y: 3pt),(left: 10pt, top: 7pt)),
    stroke: none,
    instr(lightasm("mov")), [–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏ / –ø–∞–º—è—Ç—å—é.],
    instr(lightasm("lea")), [–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥—Ä–µ—Å –≤—Ç–æ—Ä–æ–≥–æ –æ–ø–µ—Ä–∞–Ω–¥–∞ –≤ –ø–µ—Ä–≤—ã–π.],
    instr([
      - #lightasm("add")
      - #lightasm("sub")
      - #lightasm("and")...
    ]), [–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ / –ª–æ–≥–∏–∫–∞ –Ω–∞–¥ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ / –ø–∞–º—è—Ç–∏.
    
    –†–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ #codebox(lang: "c", "+="), #codebox(lang: "c", "-="), #codebox(lang: "c", "&="), #codebox(lang: "c", "|="), #codebox(lang: "c", "^="), #codebox(lang: "c", "~="), ... –≤ –°–∏.],
    instr(lightasm("neg")), [–ü–æ–º–µ–Ω—è—Ç—å –∑–Ω–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ / –ø–∞–º—è—Ç–∏],
    instr([
      - #lightasm("imul")
      - #lightasm("mul")
    ]), [–ó–Ω–∞–∫–æ–≤–æ–µ / –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ.],
    instr([
      - #lightasm("idiv")
      - #lightasm("div")
    ]), [–ó–Ω–∞–∫–æ–≤–æ–µ / –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ –¥–µ–ª–µ–Ω–∏–µ.],
    instr(lightasm("cmp")), [–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ–ª–∏—á–∏–Ω (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ #lightasm("flags")).],
    instr(lightasm("test")), [–ü–æ–±–∏—Ç–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ–ª–∏—á–∏–Ω (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ #lightasm("flags")).],
    instr([
      - #lightasm("push")
      - #lightasm("pop")
    ]), [–î–æ–±–∞–≤–∏—Ç—å / —Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ —Å—Ç–µ–∫–∞.],
    instr(lightasm("jmp")), [–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã.],
    instr(lightasm("syscall")), [–°–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤.]
  )
]

#focus-slide[
  #text(size: 40pt, weight: "bold", [–ö–∞–∫ –≤—ã—Ä–∞–∑–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏?])
]

#slide(background-image: none, place-location: horizon + center)[
  #set text(weight: "semibold", size: 30pt)
  #box(width: 20cm)[
    #code(numbers: true, leading: 5pt,
      ```c
      void my_func() {
        // –î–µ–ª–∞–µ–º —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –∑–¥–µ—Å—å
        uint64_t a, b;
        a = b;
        b = a;
        return;
      }

      void main() {
        my_func();
        __exit(0);
      }
      ```
    )
  ]
]

#slide(background-image: none, place-location: horizon + center)[
  #set text(weight: "semibold", size: 30pt)
  #box(width: 20cm)[
    #code(numbers: true, leading: 5pt,
      ```asm
      _my_func:
        # –î–µ–ª–∞–µ–º —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –∑–¥–µ—Å—å
        mov rax, rbx
        mov rbx, rax

        # return ...?

      _main:
        # _my_func() ...?

        mov rax, SYS_EXIT
        mov rdi, 0
        syscall
      ```
    )
  ]
]

#slide(header: [–í–∞—Ä–∏–∞–Ω—Ç 1], background-image: none)[
  #set text(weight: "semibold", size: 30pt)
  #place(horizon + center)[
    #table(
      columns: (12cm, 12cm),
      align: horizon,
      stroke: none,
      
      code(leading: 5pt,
        ```asm
          # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏  
          mov r10, rip
          add r10, 11
          jmp _my_func
        ```
      ),
      code(leading: 5pt,
        ```asm
          # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
          jmp r10
        ```
      )
    )
  ]
  #place(horizon + center)[
    #uncover((beginning: 2))[
      #cetz.canvas(length: 1cm, {
        cetz.draw.set-style(stroke: 5pt + black, mark: (end: ">"))
        cetz.draw.content((0, 0), (30.0, -12.2), {})
        cetz.draw.bezier((15, -2), (11, -5.5), (15, -5.5))
        cetz.draw.content((15, -1), [
          –ê —Ç–∞–∫ –Ω–µ–ª—å–∑—è!
        ])
      })
    ]
  ]
  #place(center + bottom)[
    #set text(size: 20pt)
    #super[\*] –°–¥–≤–∏–≥ –Ω–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç 11 –±–∞–π—Ç, —Ä–∞–∑–º–µ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ #mnemonic("jmp") –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
  ]
]

#slide(header: [–í–∞—Ä–∏–∞–Ω—Ç 2 -- #mnemonic("lea")], background-image: none)[
  #set text(weight: "semibold", size: 30pt)
  #place(center + horizon)[
    #table(
      columns: (12cm, 12cm),
      align: horizon,
      stroke: none,
      
      code(leading: 5pt,
        ```asm
          # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏  
          lea r10, [rip + 5]
          jmp _my_func
        ```
      ),
      code(leading: 5pt,
        ```asm
          # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
          jmp r10
        ```
      )
    )
  ]
  #place(horizon + center)[
    #uncover((beginning: 2))[
      #cetz.canvas(length: 1cm, {
        cetz.draw.set-style(stroke: 5pt + black, mark: (end: ">"))
        cetz.draw.content((0, 0), (30.0, -12.2), {})
        cetz.draw.bezier((15, -10), (19, -7.5), (19, -10))
        cetz.draw.content((8.5, -9.5), (22.5, -11.5), [
          #set align(left)
          #set block(spacing: 10pt)
          –¢–∞–∫ –º–æ–∂–Ω–æ,

          –Ω–æ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä—ã
        ])
      })
    ]
  ]
  #place(center + bottom)[
    #set text(size: 20pt)
    #super[\*] –ò –∑–¥–µ—Å—å, —Å–¥–≤–∏–≥ –Ω–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç 5 –±–∞–π—Ç
  ]
]

#slide(header: [–í–∞—Ä–∏–∞–Ω—Ç 3 -- #mnemonic("lea") + #mnemonic("push")], background-image: none)[
  #set text(weight: "semibold", size: 30pt)
  #place(center + horizon)[
    #table(
      columns: (12cm, 12cm),
      align: horizon,
      stroke: none,
      
      code(leading: 5pt,
        ```asm
          # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏  
          lea rax, [rip + 6]
          push rax
          jmp _my_func
        ```
      ),
      code(leading: 5pt,
        ```asm
          # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
          pop rax
          jmp rax
        ```
      )
    )
  ]
  #place(center + bottom)[
    #set text(size: 20pt)
    #super[\*] –ó–¥–µ—Å—å —Ç–æ–∂–µ —Å–¥–≤–∏–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π
  ]
]

#slide(header: [–í–∞—Ä–∏–∞–Ω—Ç 4 -- –∞ —á—Ç–æ, —Ç–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ?], background-image: none)[
  #set text(weight: "semibold", size: 30pt)
  #place(center + horizon)[
    #table(
      columns: (12cm, 12cm),
      align: horizon,
      stroke: none,
      
      code(leading: 5pt,
        ```asm
          # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏  
          call _my_func
        ```
      ),
      code(leading: 5pt,
        ```asm
          # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
          ret
        ```
      )
    )
  ]
]

#focus-slide[
  #text(size: 40pt)[*–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ*]

  #text(size: 20pt, weight: "semibold")[(Calling convention)]
]

#slide[
  #place(horizon + center)[
    = –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ?

    #v(2em)

    #box(width: 20cm)[
      #set align(left)

      - –ì–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è *–∞–¥—Ä–µ—Å –≤–æ–∑–≤—Ä–∞—Ç–∞*;

      - –ö–∞–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è *–∞—Ä–≥—É–º–µ–Ω—Ç—ã* –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ;

      - –ö–∞–∫–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –º–æ–∂–Ω–æ *–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å*, –∞ –∫–∞–∫–∏–µ –Ω–∞–¥–æ *–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å* –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏;

      - –ù—É–∂–Ω–æ –ª–∏ *–≤—ã—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å—Ç–µ–∫* –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏;

      - –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç *—Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã*;
    ]
  ]
]

#slide(place-location: center + horizon, background-image: none)[
  #box(width: 100%, height: auto)[
    #align(center)[
      #set block(spacing: 25pt)
      #text(
        size: 60pt, weight: "black",
      )[System V]
      
      *Calling Convention*
    ]

    #align(left)[
      - *–ê—Ä–≥—É–º–µ–Ω—Ç—ã* –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ #"rdi, rsi, rdx, rcx, r8, r9".split(", ").map(register).join(", ") ;

      - #codebox(lang: "c", "float") –∏ #codebox(lang: "c", "double") - –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ #register("xmm0") - #register("xmm7") ;

      - –¢–æ, —á—Ç–æ –Ω–µ –≤–ª–µ–∑–ª–æ, –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è *—á–µ—Ä–µ–∑ —Å—Ç–µ–∫* -- —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ;

      - –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ #inlineasm("rax") (–∏ –≤ #inlineasm("rdx"), –µ—Å–ª–∏ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç);

      - #codebox(lang: "c", "float") –∏ #codebox(lang: "c", "double") - –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ #register("xmm0") - #register("xmm1") ;

      - *–°—Ç–µ–∫ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è* –¥–æ –¥–≤—É—Ö –±–∞–π—Ç –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º;

      - #"rbx, rsi, rbp, r12, r13, r14, r15".split(", ").map(register).join(", ") –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º;

      - –ù–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ #register("rax").
    ]
  ]
]

#focus-slide[
  #text(size: 40pt)[*–°–µ–∞–Ω—Å –º–∞–≥–∏–∏*]
]

#slide(header: [–†–µ–≥–∏—Å—Ç—Ä —Ñ–ª–∞–≥–æ–≤], background-image: none, {
  set align(horizon + center)
  set text(size: 30pt)
  let color(i) = {
    let unused = (1, 2, 3, 6, 8, 10)
    if unused.find(a => a == i) == none {
      palette.at(0)
    } else {
      black
    }
  }

  box(baseline: 0.65cm + 2cm)[
    #table(
      columns: (1.6cm,) * 12,
      rows: 2.0cm,
      fill: (x, y) => {
        if y == 1 { return none }
        cell-color(color(x)).background-color
      },
      stroke: (x, y) => {
        if y == 1 { return none }
        2pt + cell-color(color(x)).stroke-color
      },
      ..("OF", "DF", "IF", "TF", "SF", "ZF", "-", "AF", "-", "PF", "-", "CF").map(a => text(weight: "bold", raw(a))),
      ..(
        [*Overflow Flag* -- –∑–Ω–∞–∫–æ–≤–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ],
        [*Direction Flag* -- —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Ñ–ª–∞–≥],
        [*Interrupt Enable Flag* -- —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–ª–∞–≥],
        [*Trap Flag* -- —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–ª–∞–≥],
        [*Sign Flag* -- –∑–Ω–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞],
        [*Zero Flag* -- –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–≤–µ–Ω –Ω—É–ª—é],
        [],
        [*Auxiliary Carry Flag* -- –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–≥–æ —Å–ª–æ–≤–∞],
        [],
        [*Parity Flag* -- –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª —á—ë—Ç–Ω—ã–º],
        [],
        [*Carry Flag* -- –±–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ],
      ).map(a => {
        set text(size: 16pt)
        set align(left)
        move(dx: 0.5cm)[
          #rotate(30deg)[
            #box(width: 15cm, height: 1cm)[
              #a
            ]
          ]
        ]
      })
    )
  ]
  h(0.8em)
  lightasm("=")
  register(" flags")
  h(2em)
  v(5cm)
  set text(size: 25pt)
  [*–ù–æ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –æ–Ω —Å–∫—Ä—ã—Ç?*]
})

#slide(background-image: none)[
  = –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã - #mnemonic("cmov**")
  #let instr(content) = {
    box(width: 100%, stroke: (right: 3pt + gray), inset: (right: 10pt, y: 3pt), content)
  }
  #let table-options = (columns: (3.0cm, auto),
      align: (col, row) => {
        if col == 0 { center }
        else { left + top }
      },
      inset: ((right: 10pt, y: 3pt),(left: 10pt, top: 7pt)),
      stroke: none)

  #{
    set par(leading: 0pt)
    set list(marker: none)
    table(
      ..table-options,
      instr(lightasm("cmovs")), [–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *Sign Flag*],
      instr([
        - #lightasm("cmovz")
        - #lightasm("cmove")
      ]), [–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *Zero Flag*],
      instr([
        - #lightasm("cmovp")
        - #lightasm("cmovpe")
      ]), [–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *Parity Flag*],
      instr([
        - #lightasm("cmovns")
        - #lightasm("cmovnz")
        - #lightasm("cmovne")
        - #lightasm("cmovnp")
        - #lightasm("cmovpo")
      ]), [–¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –Ω–∞–æ–±–æ—Ä–æ—Ç (–µ—Å–ª–∏ —Ñ–ª–∞–≥ *–Ω–µ* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)]
    )
  }

  = –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã - #mnemonic("j**")

  #{
    set par(leading: 0pt)
    set list(marker: none)
    table(
      ..table-options,
      instr(lightasm("js")), [–ü–µ—Ä–µ–π—Ç–∏, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *Sign Flag*],
      instr([#lightasm("jz"), #lightasm("je")]), [–ü–µ—Ä–µ–π—Ç–∏, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *Zero Flag*],
      instr([#lightasm("jp"), #lightasm("jpo")]), [–ü–µ—Ä–µ–π—Ç–∏, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω *Parity Flag*],
    )
  }

  –ï—â—ë –µ—Å—Ç—å #mnemonic("cset**") - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –±–∞–π—Ç –≤ #inlineasm("0") –∏–ª–∏ #inlineasm("1") –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–ª–∞–≥–æ–≤.
]

#slide(background-image: none)[
  = –ë–æ–ª—å—à–µ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤!

  –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –º—ã –≤—ã—á–ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞: #inlineasm("sub rax, rbx"). –¢–æ–≥–¥–∞:

  - #register("rax") >= #register("rbx") , –µ—Å–ª–∏ #inlineasm("–°F = 0")
  - #register("rax") <= #register("rbx") , –µ—Å–ª–∏ #inlineasm("–°F = 1")
  - #register("rax") == #register("rbx") , –µ—Å–ª–∏ #inlineasm("ZF = 0")

  –ê –µ—Å–ª–∏ —á–∏—Å–ª–∞ –±—ã–ª–∏ *–∑–Ω–∞–∫–æ–≤—ã–µ*, —Ç–æ:

  - #register("rax") >= #register("rbx") , –µ—Å–ª–∏ #inlineasm("SF = OF")
  - #register("rax") <= #register("rbx") , –µ—Å–ª–∏ #inlineasm("SF != OF")

  –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–¥—É–º–∞–ª–∏ —Å–≤–æ–∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã:

  #let table-options = (columns: (3.0cm, auto),
      align: (col, row) => {
        if col == 0 { center }
        else { left + top }
      },
      inset: ((right: 10pt, y: 3pt),(left: 10pt, top: 7pt)),
      stroke: none)

  #let instr(content) = {
    box(width: 100%, stroke: (right: 3pt + gray), inset: (right: 10pt, y: 3pt), content)
  }

  #{
    set par(leading: 0pt)
    set list(marker: none)
    table(
      ..table-options,
      instr(lightasm("jge")), [–ü–µ—Ä–µ–π—Ç–∏, –µ—Å–ª–∏ *–∑–Ω–∞–∫–æ–≤–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ* (#inlineasm("SF = OF"))],
      instr(lightasm("ja")), [–ü–µ—Ä–µ–π—Ç–∏, –µ—Å–ª–∏ *–±–µ–∑–∑–Ω–∞–∫–æ–≤–æ –±–æ–ª—å—à–µ* (#inlineasm("CF = 1") –∏ #inlineasm("ZF = 0"))],
      instr(lightasm("jl")), [–ü–µ—Ä–µ–π—Ç–∏, –µ—Å–ª–∏ *–∑–Ω–∞–∫–æ–≤–æ –º–µ–Ω—å—à–µ* (#inlineasm("SF != OF") –∏ #inlineasm("ZF = 0"))],
    )
  }

  –ù–æ #mnemonic("sub") –ø–æ–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ #register("rax"). #mnemonic("cmp") —Ç–æ–∂–µ –≤—ã—á–∏—Ç–∞–µ—Ç, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å.
]

#focus-slide[
  #text(size: 40pt)[*–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤*]
]

#slide(header: "–°—Ç–µ–∫–æ–≤—ã–π —Ñ—Ä–µ–π–º", background-image: none)[
   #set text(weight: "semibold", size: 30pt)
  #code(numbers: true, leading: 5pt,
    ```c
    void merge_sort(int* arr, int n) {
      // –ì–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ?
      int mid = n / 2;
      int left_size = mid, right_size = n - mid;

      // ...
      merge_sort(left, left_size);
      merge_sort(right, right_size);
      // ...
    }
    ```
  )
]

#slide(header: "–°—Ç–µ–∫–æ–≤—ã–π —Ñ—Ä–µ–π–º", background-image: none)[
   #set text(weight: "semibold", size: 25pt)
  
  #code(numbers: true, leading: 5pt,
    ```asm
    _merge_sort:
      push rbp
      mov rbp, rsp
      sub rsp, 16 # 16 –±–∞–π—Ç –¥–ª—è —Ñ—Ä–µ–π–º–∞
      # ...
      mov [rbp - 4], rax  # int mid = ...
      mov [rbp - 8], rax  # int left_size = ...
      mov [rbp - 12], rax # int right_size = ...
      # ...
      mov rsp, rbp
      pop rbp
      ret  
    ```
  )
]

#slide(header: "–°—Ç–µ–∫–æ–≤—ã–π —Ñ—Ä–µ–π–º", background-image: none, place-location: horizon)[  

  - –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å #inlineasm("push rbp") –∏ #inlineasm("mov rbp, rsp"), —Ç–æ —Ñ—Ä–µ–π–º—ã –æ–±—Ä–∞–∑—É—é—Ç –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫.

  - –ò—Ç–µ—Ä–∏—Ä—É—è –ø–æ –Ω–µ–º—É, –¥–µ–±–∞–≥–≥–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å –±–µ–∫—Ç—Ä–µ–π—Å:

  #align(center)[
    #box(inset: 20pt, fill: rgb(17, 17, 17), radius: 20pt)[
      #image("img/debugger.png")
    ]
  ]
]

#slide(header: "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", place-location: horizon + left)[
üîó #link("https://godbolt.org")[*godbolt.org*] -- #text(weight: "semibold")[–û–Ω–ª–∞–π–Ω-–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä C / C++ –≤ –∞—Å—Å–µ–º–±–ª–µ—Ä;]

üîó #link("https://defuse.ca/online-x86-assembler.htm#disassembly")[*online-x86-assembler*] -- #text(weight: "semibold")[–û–Ω–ª–∞–π–Ω-–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –∞—Å—Å–µ–º–±–ª–µ—Ä–∞ –≤ –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥ x86;]

üîó #link("https://nandgame.com")[*nandgame.com*] -- #text(weight: "semibold")[–ò–≥—Ä–∞ –ø—Ä–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑ —Ä–µ–ª–µ. –°–æ–≤–µ—Ç—É—é!]
]

#title-slide[
  #place(horizon + center)[
    = –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!
  ]

  #place(
    bottom + center,
  )[
    // #qr-code("https://github.com/JakMobius/courses/tree/main/mipt-os-basic-2024", width: 5cm)

    #box(
      baseline: 0.2em + 4pt, inset: (x: 15pt, y: 15pt), radius: 5pt, stroke: 3pt + rgb(185, 186, 187), fill: rgb(240, 240, 240),
    )[
      üîó #link(
        "https://github.com/JakMobius/courses/tree/main/mipt-os-basic-2024",
      )[*github.com/JakMobius/courses/tree/main/mipt-os-basic-2024*]
    ]
  ]
]