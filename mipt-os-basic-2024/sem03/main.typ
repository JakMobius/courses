
#import "@preview/polylux:0.3.1": *
#import "@preview/cetz:0.2.2"
#import "../theme/theme.typ": *
#import "./utils.typ": *

#show: theme

#title-slide[
  #align(horizon + center)[
    = –§–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã

    –ê–ö–û–°, –ú–§–¢–ò

    26 —Å–µ–Ω—Ç—è–±—Ä—è, 2024
  ]
]

#show: enable-handout

#focus-slide[
  #set block(above: 25pt, below: 25pt)
  #set text(size: 50pt)
  *–í—Å—ë –µ—Å—Ç—å —Ñ–∞–π–ª...*

  #uncover((beginning: 2))[
    #set text(size: 25pt)
    *...–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä*
  ]
]

#slide(
  place-location: center, background-image: none,
)[
  #let transparent = color.rgb(255, 255, 255, 0)
  #let left-color = cell-color(base-color: byte-colors.at(0))
  #let right-color = cell-color(base-color: byte-colors.at(3))
  #let box-options = (inset: (x: 25pt, y: 30pt), width: 12cm, radius: 20pt)

  #grid(
    columns: 2, rows: (1.5cm, auto), column-gutter: 2cm, stroke: none, align: (column, row) => {
      if row == 0 { top + center } else { top + left }
    }, [
      = –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
    ], [
      = –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
    ], [
      #align(
        center,
      )[
        #box(
          fill: left-color.background-color, stroke: 1pt + left-color.stroke-color, ..box-options,
        )[
          #align(left, [
            #set text(size: 25pt)
            #set list(marker: raw("="))
            - #codebox(lang: "c", "STDIN_FILENO")
            - #codebox(lang: "c", "STDOUT_FILENO")
            - #codebox(lang: "c", "STDERR_FILENO")
          ])
        ]
      ]

      - *–ü–æ—Ç–æ–∫–∏ –∫–æ–Ω—Å–æ–ª–∏:* –≤–≤–æ–¥, –≤—ã–≤–æ–¥, –æ—à–∏–±–∫–∏;

      - –ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω—ã #codebox("0") , #codebox("1") –∏ #codebox("2");

      - –ù–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã;

      - –ò—Ö –¥–∞–∂–µ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å (–Ω–æ –∑–∞—á–µ–º?).
    ], [
      #align(
        center,
      )[
        #box(
          fill: right-color.background-color, stroke: 1pt + right-color.stroke-color, ..box-options,
        )[
          #align(left, [
            #set text(size: 25pt)
            #set list(marker: raw("="))
            - #codebox(lang: "c", "open(...)")
            - #codebox(lang: "c", "socket(...)")
            - #codebox(lang: "c", "accept(...)")
            - #codebox(lang: "c", "epoll(...)")
            - #codebox(lang: "c", "socketpair(...)") #super("*")
            - #codebox(lang: "c", "signalfd(...)") , ...
          ])
        ]
      ]

      - –§–∞–π–ª—ã, —Å–µ—Ç—å, –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–µ—Ä—ã,...;

      - –í—Å—ë, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö.
    ],
  )
]

#focus-slide[
  #text(size: 50pt)[
    *–ü–æ—á–µ–º—É –Ω–µ #codebox(lang: "c", "fopen(...)") ?*
  ]

  #uncover(
    (beginning: 2),
  )[
    #text(
      size: 25pt,
    )[
      #place(
        center + bottom,
      )[
        #codebox(lang: "c", "fopen(...)") –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç #codebox(lang: "c", "FILE*"), –∞ –Ω–µ
        –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
      ]
    ]
  ]
]

#slide(
  header: [–ü–∞–ø–∫–∏ -- —Ç–æ–∂–µ —Ñ–∞–π–ª—ã?], background-image: none,
)[

#place(horizon + center)[
#set text(size: 30pt)

#code(numbers: true, leading: 5pt, ```c
      int main() {
        int fd = open("/", O_RDONLY, 0);
        struct dirent ent = {};
        while(getdents64(fd, &ent, sizeof(ent)) > 0) {
            printf("%s\n", ent.d_name);
            lseek(fd, ent.d_off, SEEK_SET);
        }
      }
      ```)
]

#uncover(
  (beginning: 2),
)[
  #place(bottom + center)[
    #set text(size: 21pt)
    *–î–∞, —ç—Ç–æ —Ç–æ–∂–µ —Ñ–∞–π–ª–æ–≤—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã.* –ê –µ—â—ë —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∞ –Ω–µ –ø–∞–ø–∫–∏.
  ]
]
]

#slide(
  header: [–ê –µ—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å #codebox(lang: "c", "read(...)") –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é?], background-image: none,
)[
#place(horizon)[
#text(size: 30pt)[
#code(numbers: true, leading: 5pt, ```c
        int main() {
          int fd = open("/", O_RDONLY, 0);
          char buffer[16];
          if(read(fd, buffer, sizeof(buffer)) >= 0) {
            printf("%15s", buffer);
          } else perror("read");
        }
        ```)
]
]

#place(
  bottom,
)[
  #uncover(
    (beginning: 2),
  )[
    #text(
      size: 25pt,
    )[
      *–í—ã–≤–æ–¥:* #codebox("read: Is a directory") . *–ü—Ä–∏—á–∏–Ω–∞:* #codebox(lang: "c", "read(...) == -EISDIR")
    ]
  ]
]
]

#slide(
  header: [–§–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä - —ç—Ç–æ], place-location: horizon + left,
)[
  #let codeblocks(arr) = {
    arr.map(code => codebox(lang: "c", code)).join(" , ")
  }

  - *–ß–∏—Å–ª–æ*, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–∞–∫–æ–º—É-—Ç–æ —Ä–µ—Å—É—Ä—Å—É.

  - –ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ *"—É–∫–∞–∑–∞—Ç–µ–ª—å" –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å*.

  - *–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–º–Ω–∏—Ç—å* —Ç–∏–ø—ã –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤. –≠—Ç–æ —É–ø—Ä–æ—â–∞—é—Ç –æ–±—ë—Ä—Ç–∫–∏:

    - #codeblocks(("FILE", "fopen()", "fclose()", "fread()", "fwrite()", "fseek()")) ,
      ... –¥–ª—è —Ñ–∞–π–ª–æ–≤;

    - #codeblocks(("DIR", "opendir()", "closedir()", "readdir()", "seekdir()")) , ...
      –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π;

    - *–ò –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏—á–µ–≥–æ* –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∫–µ—Ç–∞–º–∏ / —Å–∏–≥–Ω–∞–ª–∞–º–∏ / pipe-–∞–º–∏.

  - –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ #codebox("/proc/<pid>/fd/")
]

#slide(
  header: [#codebox(lang: "c", "open(char *path, int flags, mode_t mode)")], background-image: none,
)[
== –û—Ç–∫—Ä—ã—Ç—å (—Å–æ–∑–¥–∞—Ç—å) —Ñ–∞–π–ª (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é).

== *#codebox(lang: "c", "int flags") :*
#set list(marker: `|=`)
- #codebox("O_RDONLY") : –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ *—á—Ç–µ–Ω–∏–µ*;
- #codebox("O_WRONLY") : –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ *–∑–∞–ø–∏—Å—å*;
- #codebox("O_RDWR") : –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ *—á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å*;
- #codebox("O_TRUNC") : *–û—á–∏—Å—Ç–∏—Ç—å* —Ñ–∞–π–ª –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏;
- #codebox("O_CREAT") : *–°–æ–∑–¥–∞—Ç—å* —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç;
- #codebox("O_EXCL") : –°–ª–æ–º–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å.

== *#codebox(lang: "c", "mode_t mode")* : –º–∞—Å–∫–∞ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.
]

#slide(
  header: [–ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å], background-image: none, place-location: horizon,
)[

  - –î–ª—è —ç—Ç–æ–≥–æ —Å–ª—É–∂–∞—Ç —Å–∞–º—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã:

  #[
    #set list(marker: none)
    - #codebox(lang: "c", "read(int fd, void* buf, size_t count)")
    - #codebox(lang: "c", "write(int fd, void* buf, size_t count)")
  ]

  - –°—É—â–µ—Å—Ç–≤—É—é—Ç #codebox(lang: "c", "pread(...)") –∏ #codebox(lang: "c", "pwrite(...)") ,
    –∫–æ—Ç–æ—Ä—ã–µ *—è–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –ø–æ–∑–∏—Ü–∏—é —Ñ–∞–π–ª–∞*.

  - –ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å *–Ω–µ—Å–∫–æ–ª—å–∫–æ –±—É—Ñ–µ—Ä–æ–≤*, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

  #[
    #set list(marker: none)
    - #codebox(lang: "c", "readv(int fd, struct iovec *vector, int count)")
    - #codebox(lang: "c", "writev(int fd, struct iovec *vector, int count)")
  ]
]

#slide(
  header: [#codebox(lang: "c", "lseek(int fd, off_t offset, int whence)")], background-image: none,
)[
== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∞–π–ª–∞

== *#codebox(lang: "c", "int whence") :*

#set list(marker: `=`)
- #codebox("SEEK_SET") : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–∞ #codebox("offset") ;
- #codebox("SEEK_CUR") : –°–¥–≤–∏–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–∞ #codebox("offset") ;
- #codebox("SEEK_END") : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ *–∫–æ–Ω–µ—Ü* –∏ —Å–¥–≤–∏–Ω—É—Ç—å –Ω–∞ #codebox("offset") .

== –£–∑–Ω–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–æ–∂–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –≤—ã–∑–æ–≤–æ–º #codebox(lang: "c", "tell(int fd)")
]

#slide(
  header: [#codebox(lang: "c", "tell(int fd)")], background-image: none,
)[
== –°–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏.

== *#codebox(lang: "c", "int cmd") :*

#set list(marker: `=`)
- #codebox("F_SETFD") : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞;
- #codebox("F_SETFL") : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥–∏ —Å—Ç–∞—Ç—É—Å–∞;
- #codebox("F_SETLK") : –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å *–±–ª–æ–∫–∏—Ä–æ–≤–∫—É* –Ω–∞ —Ñ–∞–π–ª;
- #codebox("F_DUPFD") : *–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å* –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä;
- #codebox("F_SETSIG") : –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á—Ç–µ–Ω–∏–µ / –∑–∞–ø–∏—Å—å;
- #codebox("F_SETPIPE_SZ") : –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏.

== *#codebox(lang: "c", "long arg") :* –∞—Ä–≥—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ #codebox("F_SET*") -- –∫–æ–º–∞–Ω–¥–∞—Ö
]

#slide(
  header: [–ö–∞–∫–∏–µ —Ñ–ª–∞–≥–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?], background-image: none,
)[
  == –§–ª–∞–≥–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ (#codebox("F_SETFD")):
  - #codebox("FD_CLOEXEC") : –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø—Ä–∏ –≤—ã–∑–æ–≤–µ #codebox(lang: "c", "exec()")
  - –ò –≤—Å—ë, –∏—Ö —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —à—Ç—É–∫–∞ ü§∑üèª‚Äç‚ôÇÔ∏è.
  == –ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–ª–∞–≥–∏ —Å—Ç–∞—Ç—É—Å–∞ (#codebox("F_SETFL")):
  - #codebox("O_APPEND") : –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –∫–∞–∫ –≤ –ª–æ–≥;
  - #codebox("O_NONBLOCK") : –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤–≤–æ–¥/–≤—ã–≤–æ–¥;
  - #codebox("O_NOATIME") : –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É;
  == –ë–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–ª–∞–≥–∏ —Å—Ç–∞—Ç—É—Å–∞:
  - #codebox("O_ASYNC") : –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏;
  - #codebox("O_DIRECT") : –ø—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å, –æ–±—Ö–æ–¥ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —è–¥—Ä–∞;

]

#focus-slide[
  #text(size: 50pt)[
    *–ê —á—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∞–π–ª?*
  ]
]

#slide(
  header: [–§–∞–π–ª -- —ç—Ç–æ –Ω–µ –ø—É—Ç—å!], background-image: none, place-location: horizon + center,
)[

  #let pathbox(content) = [
    #box(radius: 10pt, fill: rgb(60, 60, 60), inset: 20pt)[
      #set text(fill: white)
      #raw(content)
    ]
  ]

  #set block(above: 30pt, below: 30pt)

  #set text(size: 45pt)
  #pathbox("/home/you/test.txt")

  #set text(size: 25pt)
  *–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–º –∂–µ —Ñ–∞–π–ª–æ–º, —á—Ç–æ –∏:*

  #set text(size: 45pt)
  #pathbox("/home/you/test2.txt")
]

#slide(
  background-image: none, place-location: horizon + center,
)[
  #cetz.canvas(
    length: 1cm, {
      cetz.draw.set-style(
        content: (padding: .2), fill: gray.lighten(70%), stroke: gray.lighten(70%),
      )

      let box-options = (width: 100%, height: 100%, radius: 10pt, inset: 20pt)

      let largecodebox(lang: none, content) = {
        box(radius: 5pt, fill: rgb(60, 60, 60), width: 15cm, height: 1.5cm)[
          #set align(horizon + center)
          #set text(fill: white)
          #set raw(theme: "../theme/halcyon.tmTheme")
          #raw(lang: lang, content)
        ]
      }

      let background(color) = {
        box(
          fill: cell-color(base-color: color).background-color, width: 100%, height: 100%,
        )
      }

      let title(color, content) = {
        place(
          top + left,
        )[
          #box(
            inset: 15pt,
          )[
            #text(
              weight: "black", size: 30pt, fill: cell-color(base-color: color).stroke-color,
            )[
              #content
            ]
          ]
        ]
      }

      cetz.draw.content((0, 1), (30, -4), padding: none, {
        background(blue)
        title(blue, [–ü—Ä–æ–≥—Ä–∞–º–º–∞])

        place(horizon + center)[
          #box(..box-options)[
            #set text(size: 30pt)
            #set align(center)
            #largecodebox(lang: "c", "write(fd, \"Hi!\", 4);")
          ]
        ]
      })

      cetz.draw.content((0, -4), (30, -9), padding: none, {
        background(red)
        title(red, [–Ø–¥—Ä–æ])

        place(horizon + center)[
          #box(..box-options)[
            #set text(size: 30pt)
            #set align(center)
            #largecodebox(lang: "c", "process->fds[fd]->inum")
          ]
        ]
      })

      cetz.draw.content(
        (0, -9), (30, -16), padding: none, {
          background(black)
          title(black, [–î–∏—Å–∫])

          place(
            center + bottom,
          )[
            #box[
              #text(size: 50pt)[*...*]
              #h(1em)
              #box(
                baseline: 2.5cm,
              )[#grid(
                  rows: (3cm, 1cm), columns: (3cm,) * 8, row-gutter: 5pt, align: center + horizon, inset: 0pt, ..range(8).map(i => [
                    #box(width: 100%, height: 100%, stroke: 2pt + black)[
                      *Index Node*
                    ]
                  ]), ..range(8).map(i => [
                    #set text(size: 30pt, weight: "black")
                    #raw("[" + str(i + 48) + "]")
                  ]),
                )]
              #h(1em)
              #text(size: 50pt)[*...*]

              #v(1em)
            ]
          ]
        },
      )

      cetz.draw.set-style(mark: (end: ">"), stroke: 5pt + black, fill: none)

      let a = (x: 14, y: -2.5)
      let b = (x: 17, y: -5.5)
      let c = (x: 20, y: -7.5)
      let d = (x: 11, y: -11)

      cetz.draw.bezier((a.x, a.y), (b.x, b.y), (a.x, b.y), (b.x, a.y), name: "line1")
      cetz.draw.bezier((c.x, c.y), (d.x, d.y), (c.x, d.y), (d.x, c.y), name: "line2")

      cetz.draw.content((name: "line1", anchor: 30%), anchor: "south-west", padding: .4, [
        #text(size: 25pt)[*–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä*]
      ])

      cetz.draw.content(("line2.mid"), anchor: "south", padding: .4, [
        #text(size: 25pt)[*–ù–æ–º–µ—Ä inode*]
      ])
    },
  )
]

#let largecell(color, content) = [
  #let color = cell-color(base-color: color)
  #box(
    radius: 10pt, fill: color.background-color, stroke: 3pt + color.stroke-color, inset: 30pt,
  )[
    #set text(fill: black)
    #content
  ]
]

#slide(
  place-location: center + horizon,
)[
  #box(
    width: 75%, height: 10cm,
  )[
    #align(center)[
      #set block(spacing: 40pt)
      #text(size: 60pt, weight: "black")[#largecell(black, [Index Node])]
    ]

    #align(
      left,
    )[
      - *–°—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞—é—Ç "—Ñ–∞–π–ª–æ–º"*;

      - –•—Ä–∞–Ω–∏—Ç—Å—è –≤ –¥–ª–∏–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –Ω–∞ –∂–µ—Å—Ç–∫–æ–º –¥–∏—Å–∫–µ;

      - *–ó–Ω–∞–µ—Ç*, –≥–¥–µ –Ω–∞ –∂–µ—Å—Ç–∫–æ–º –¥–∏—Å–∫–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è *—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –µ—ë —Ñ–∞–π–ª–∞*;

      - *–•—Ä–∞–Ω–∏—Ç —á–∏—Å–ª–æ —Å—Å—ã–ª–æ–∫* –Ω–∞ —Å–∞–º—É —Å–µ–±—è (–∫–∞–∫ #codebox(lang: "cpp", "std::shared_ptr")).
    ]
  ]
]

#let draw-dir-ent(position, values, more: true) = {
  let column-width = 3.2
  let index-node-height = 2.5
  let margin = 1.0

  let dirent-start = index-node-height + margin
  let dirent-height = 1.8 * values.len()
  if (more) {
    dirent-height += 1
  }

  let left = position.x - column-width / 2
  let right = position.x + column-width / 2

  cetz.draw.set-style(mark: (end: ">"), stroke: 5pt + black, fill: none)

  cetz.draw.content(
    (left, position.y), (right, position.y - index-node-height), padding: none, {
      set align(horizon + center)
      let color = cell-color(base-color: black)
      box(
        width: 100%, height: 100%, fill: color.background-color, stroke: 2pt + color.stroke-color, radius: 10pt,
      )[
        *Index Node*
      ]
    },
  )

  cetz.draw.line(
    (position.x, position.y - index-node-height - 0.1), (position.x, position.y - index-node-height - margin + 0.1), stroke: 4pt + black,
  )

  cetz.draw.content(
    (left, position.y - dirent-start), (right, position.y - dirent-start - dirent-height), padding: none, {
      set align(center)
      set block(spacing: 5pt)
      set text(size: 25pt)
      let colors = cell-color(base-color: byte-colors.at(1))

      grid(
        rows: (1.8cm,) * values.len(), columns: 100%, align: horizon + center, stroke: 2pt + colors.stroke-color, fill: colors.background-color, ..values,
      )
      if (more) {
        text(size: 30pt)[*...*]
      }
    },
  )
}

#let horizontal-bezier(a, b) = {
  cetz.draw.bezier((a.x, a.y), (b.x, b.y), (b.x, a.y), (a.x, b.y))
}

#slide(
  place-location: center + top, background-image: none,
)[
#cetz.canvas(
  length: 1cm, {
    cetz.draw.set-style(
      content: (padding: .2), fill: gray.lighten(70%), stroke: gray.lighten(70%),
    )

    let largecodebox(lang: none, content) = {
      let color = cell-color(base-color: blue)
      box(
        radius: 5pt, fill: color.background-color, width: 12cm, height: 1.7cm, stroke: 2pt + color.stroke-color,
      )[
        #set align(horizon + center)
        #set text(fill: black)
        #set raw(theme: "../theme/halcyon.tmTheme")
        #raw(lang: lang, content)
      ]
    }

    cetz.draw.content((0, -1), (30, -4), padding: none, {
      box(width: 100%, height: 100%)[
        #set text(size: 30pt)
        #set align(center)
        #largecodebox("/usr/bin/bash")
      ]
    })

    let indices = (3, 2, 2)
    let index-node-positions = range(4).map(x => 6 + x * 6)

    let data = (
      (`.`, `..`, `etc`, [*`usr`*]), (`.`, `..`, [*`bin`*], `share`), (`.`, `..`, [*`bash`*], `mkdir`), ("0x7f", "0x45", "0x4c", "0x46").map(a => codebox(a)),
    )

    for (i, pos) in index-node-positions.enumerate() {
      draw-dir-ent((x: pos, y: -4.5), data.at(i))
    }

    for (i, dirent-index) in indices.enumerate() {
      let position = index-node-positions.at(i)
      let index-node = (x: 4.25 + position, y: -5.75)
      let dirent = (x: 1.75 + position, y: -9 - 1.8 * dirent-index)

      horizontal-bezier(dirent, index-node)
    }

    cetz.draw.line((0, -5.75), (4.25, -5.75), name: "root", stroke: luma(80) + 5pt)

    cetz.draw.content((name: "root", anchor: 50%), anchor: "south", padding: .4, [
      #text(size: 20pt, fill: luma(80))[*–ö–æ—Ä–µ–Ω—å*]
    ])

    cetz.draw.set-style(mark: (end: none))
    cetz.decorations.flat-brace(
      (index-node-positions.at(0) - 2.5, -8), (index-node-positions.at(0) - 2.5, -8 - 1.8 * 4), flip: true, name: "brace",
    )

    cetz.draw.content("brace.content", anchor: "south", padding: 1.3, angle: 90deg, [
      #text(size: 25pt)[*Directory Entries*]
    ])
  },
)
]

#slide(place-location: center + horizon)[

  #box(width: 65%, height: 10cm)[
    #align(center)[
      #set block(spacing: 40pt)
      #text(
        size: 60pt, weight: "black",
      )[#largecell(byte-colors.at(1), [Directory Entry])]
    ]

    #align(left)[
      - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ c *–∏–º–µ–Ω–µ–º* –∏ *–∞–¥—Ä–µ—Å–æ–º* Index Node;

      - –ú–æ–∂–µ—Ç *—Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–π –∂–µ Index Node*(#codebox("./"));

      - –ñ–∏–≤—ë—Ç —Ç–∞–º, –≥–¥–µ –æ–±—ã—á–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞;

      - –•—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ –¥—Ä—É–≥–∏—Ö Directory Entry.
    ]
  ]
]

#slide(
  header: [–ß—Ç–æ, –µ—Å–ª–∏ –Ω–∞ Index Node –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫?], background-image: none,
)[
  #place(
    horizon + center,
  )[
    #cetz.canvas(
      length: 1cm, {
        let dirs = (".", "..", "test1", "test2").map(raw)
        let file = ("H", "e", "l", "l").map(a => codebox(lang: "c", "'" + a + "'"))
        draw-dir-ent((x: 0, y: 0), dirs)
        cetz.draw.line((-6, -1.25), (-1.6, -1.25), name: "root", stroke: 5pt + luma(80))
        cetz.draw.content((name: "root", anchor: 50%), anchor: "south", padding: .4, [
          #text(size: 20pt, fill: luma(80))[*–ö–æ—Ä–µ–Ω—å*]
        ])

        let indicies = (2, 3)
        let index-node = (x: 10, y: -4)

        // –ß—Ç–æ–±—ã —Å–¥–≤–∏–Ω—É—Ç—å –≤—Å—ë –≤ —Ü–µ–Ω—Ç—Ä
        cetz.draw.content((-6, 0), (16, 0), [])

        cetz.draw.set-style(mark: (end: none))

        let c = (x: 5, y: -5)
        let d = (x: 8.4, y: -1.25)

        for (i, dirent-index) in indicies.enumerate() {
          let dirent = (x: 1.75, y: -4.5 - 1.8 * dirent-index)

          let a = dirent
          let b = (x: c.x, y: a.y)

          cetz.draw.bezier((a.x, a.y), (c.x, c.y), (b.x, b.y))
        }

        cetz.draw.set-style(mark: (end: ">"), stroke: 5pt + black, fill: none)

        cetz.draw.bezier((c.x, c.y), (d.x, d.y), (c.x, d.y))

        draw-dir-ent((x: 10, y: 0), file)
      },
    )
  ]

  #place(
    center + bottom,
  )[
    #uncover(
      (beginning: 2),
    )[
      #text(
        size: 25pt, [–≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è *–∂–µ—Å—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞.* –¢–∞–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏.],
      )
    ]
  ]
]

#slide(
  background-image: none,
)[
  #let header = [= –ó–∞–¥–∞—á–∞: —Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —É –ø—É—Å—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏?]
  #only("1")[
    #place(center + horizon, header)
  ]
  #uncover(
    (beginning: 2),
  )[
    #header

    #place(
      horizon + center,
    )[
      #cetz.canvas(
        length: 1cm, {
          let dirs = (".", "..", "dir").map(raw)
          let file = (".", "..").map(raw)
          draw-dir-ent((x: 0, y: 0), dirs, more: false)
          cetz.draw.line((-6, -1.25), (-1.6, -1.25), name: "root", stroke: 5pt + luma(80))
          cetz.draw.content((name: "root", anchor: 50%), anchor: "south", padding: .4, [
            #text(size: 20pt, fill: luma(80))[*–ö–æ—Ä–µ–Ω—å*]
          ])

          let indicies = (2, 3)
          let index-node = (x: 10, y: -4)

          // –ß—Ç–æ–±—ã —Å–¥–≤–∏–Ω—É—Ç—å –≤—Å—ë –≤ —Ü–µ–Ω—Ç—Ä
          cetz.draw.content((-6, 0), (16, 0), [])

          cetz.draw.set-style(mark: (end: none))

          let dirent(x, y, left: false) = {
            let shift = if left { -1.75 } else { 1.75 }
            if (y == -1) {
              (x: shift + 10 * x, y: -1.25)
            } else {
              (x: shift + 10 * x, y: -4.5 - 1.8 * y)
            }
          }

          {
            let a = dirent(0, 2)
            let d = dirent(1, -1, left: true)

            cetz.draw.bezier((a.x, a.y), (d.x, d.y), (5, d.y), mark: (end: ">"))
          }

          for i in range(0, 2) {
            for j in range(0, 2 - i) {
              let a = dirent(i, j)
              let c = dirent(i, -1)
              let b = (x: a.x + j * 0.5 + 1.2, y: (a.y + c.y) * 0.5)

              cetz.draw.bezier((a.x, a.y), (c.x, c.y), (b.x, b.y), mark: (end: ">"))
            }
          }

          {
            let a = dirent(1, 1, left: true)
            let d = dirent(0, -1)

            cetz.draw.bezier((a.x, a.y), (d.x, d.y), (5, d.y), mark: (end: ">"))
          }

          draw-dir-ent((x: 10, y: 0), file, more: false)
        },
      )
    ]

    #place(bottom)[
      #colbox(color: green)[*–û—Ç–≤–µ—Ç: 2*]
    ]
  ]
]

#focus-slide[
  #set block(above: 25pt, below: 25pt)
  #text(size: 50pt)[
    *VFS*
  ]

  = –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
]

#slide(
  place-location: horizon,
)[
  - –ö —Å–∏—Å—Ç–µ–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–æ *–º–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–µ–π*: –¥–∏—Å–∫–∏, USB-–Ω–æ—Å–∏—Ç–µ–ª–∏, ...;

  - –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ—é —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É;

  #set align(center)
  = *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –≤—Å–µ–º —Å—Ä–∞–∑—É?*
]

#slide(
  header: [VFS - –û–±–æ–±—â—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –§–°.], place-location: horizon + center,
)[
#set align(center)
=== –ú–æ–∂–Ω–æ –¥—É–º–∞—Ç—å –æ–± —ç—Ç–æ–º, –∫–∞–∫ –æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –∫–ª–∞—Å—Å–µ:

#v(1em)

#text(size: 25pt, weight: "bold")[
```cpp
      class ExFat: public virtual VFS { /* ... */ }
      class Fat32: public virtual VFS { /* ... */ }
      class NTFS:  public virtual VFS { /* ... */ }
      class FAT:   public virtual VFS { /* ... */ }
      class HFS:   public virtual VFS { /* ... */ }
      // ...
    ```
]

=== –¢–µ–ø–µ—Ä—å –ª—é–±—É—é –∏–∑ —ç—Ç–∏—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ —Å–∏—Å—Ç–µ–º–µ:

#text(size: 25pt, weight: "bold")[
```cpp
    void System::mount(VFS* filesystem, const char* path);
    ```
]
]

#slide(
  header: [#codebox("procfs") -- –Ω–µ —Ñ–∞–π–ª–æ–≤–∞—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞.], place-location: horizon,
)[
  #set list(marker: none)
  - #bash("cat /proc/meminfo") : –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏;
  - #bash("cat /proc/cpuinfo") : –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU;
  - #bash("cat /proc/version") : –≤–µ—Ä—Å–∏—è —è–¥—Ä–∞;
  - #bash("cat /proc/schedstat") : –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ –∫–∞–∂–¥–æ–º CPU;
  - #bash("cat /proc/filesystems") : –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.
  - #bash("cat /proc/<pid>/schedstat") : –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ;
  - #bash("ls /proc/<pid>/fd") : –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã;

  *–≠—Ç–∞ —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–∂–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å VFS.*
]

#slide(header: [–î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã], place-location: horizon + left)[
  == –°–∏—Å—Ç–µ–º–Ω—ã–µ:

  #set list(marker: none)
  - #codebox("sysfs") : —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏ –¥—Ä–∞–π–≤–µ—Ä–∞—Ö;
  - #codebox("pipefs") : —Å–ª—É–∂–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pipe-–æ–≤;
  - #codebox("ramfs") : –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å –≤–º–µ—Å—Ç–æ –¥–∏—Å–∫–∞;
  - #codebox("tmpfs") : –∫–∞–∫ #codebox("ramfs") , –Ω–æ —Å–æ —Å–±—Ä–æ—Å–æ–º –Ω–∞ swap;
  
  == –û–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:

  - #codebox("ecryptfs") : —Ö—Ä–∞–Ω–∏—Ç —Ñ–∞–π–ª—ã –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ;
  - #codebox("unionfs") : –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –≤–º–µ—Å—Ç–µ;
  - #codebox("overlayfs") : —Ö—Ä–∞–Ω–∏—Ç —Ä–∞–∑–Ω–∏—Ü—É –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
  ]

#slide(
  place-location: horizon + center,
)[
  #box(
    width: 90%, height: 70%,
  )[
    #set block(below: 25pt, above: 40pt)

    = *–ö–∞–∫ –±—ã—Ç—å, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —Å–≤–æ—é –§–°?*

    #uncover((beginning: 2))[
      #text(size: 50pt, weight: "black")[FUSE]

      === Filesystem in userspace
    ]

    #uncover((beginning: 3))[
      #parbreak()
      #set align(left)
      #set list(marker: none)
      - #pro() *–ò–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è —è–¥—Ä–∞*;
      - #con() *–†–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ, —á–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ —è–¥—Ä–æ —Ñ–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã*.
    ]
  ]
]

#slide(
  place-location: horizon + center)[
  #cetz.canvas(length: 1cm, {
    cetz.draw.content((0, 0), (8, -5))[
      #let cell-color = cell-color(base-color: blue);
      #box(width: 100%, height: 100%, fill: cell-color.background-color, stroke: 3pt + cell-color.stroke-color, radius: 20pt)[
        #align(center + horizon)[
          #text(size: 30pt, fill: cell-color.stroke-color)[
            *–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞*
          ]
        ]
      ]
    ]

    cetz.draw.content((0, -6), (19, -13))[
      #let cell-color = cell-color(base-color: red);
      #box(width: 100%, height: 100%, fill: cell-color.background-color, stroke: 3pt + cell-color.stroke-color, radius: 20pt, inset: 20pt)
    ]

    cetz.draw.content((0, -6), (8, -13))[
      #let cell-color = cell-color(base-color: red);
      #align(horizon + center)[
        #text(size: 30pt, fill: cell-color.stroke-color)[
          *–Ø–¥—Ä–æ*
        ]
      ]
    ]

    cetz.draw.content((8, -6.5), (18.5, -12.6))[
      #let cell-color = cell-color(base-color: red);
      #box(width: 100%, height: 100%, fill: cell-color.background-color, stroke: 3pt + cell-color.stroke-color, inset: 20pt)[
        #align(center + horizon)[
          #text(size: 30pt, fill: cell-color.stroke-color)[
            *–î—Ä–∞–π–≤–µ—Ä –§–°*
          ]
        ]
      ]
    ]

    cetz.draw.set-style(content: (padding: .2), stroke: 5pt + black)
    cetz.draw.line((2, -5), (2, -8))
    cetz.draw.line((2, -8), (8, -8), mark: (end: ">"))

    cetz.draw.line((8, -7.5), (2.5, -7.5))
    cetz.draw.line((2.5, -7.5), (2.5, -5), mark: (end: ">"))
  })
]

#slide(
  place-location: horizon + center)[
  #cetz.canvas(length: 1cm, {
    cetz.draw.content((0, 0), (8, -5))[
      #let cell-color = cell-color(base-color: blue);
      #box(width: 100%, height: 100%, fill: cell-color.background-color, stroke: 3pt + cell-color.stroke-color, radius: 20pt)[
        #align(center + horizon)[
          #text(size: 30pt, fill: cell-color.stroke-color)[
            *–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞*
          ]
        ]
      ]
    ]

    cetz.draw.content((9, 0), (18, -5))[
      #let cell-color = cell-color(base-color: blue);
      #box(width: 100%, height: 100%, fill: cell-color.background-color, stroke: 3pt + cell-color.stroke-color, radius: 20pt)[
        #align(center + horizon)[
          #text(size: 30pt, fill: cell-color.stroke-color)[
            *Userspace-–¥—Ä–∞–π–≤–µ—Ä*
          ]
        ]
      ]
    ]

    cetz.draw.content((0, -6), (19, -13))[
      #let cell-color = cell-color(base-color: red);
      #box(width: 100%, height: 100%, fill: cell-color.background-color, stroke: 3pt + cell-color.stroke-color, radius: 20pt, inset: 20pt)
    ]

    cetz.draw.content((0, -6), (8, -13))[
      #let cell-color = cell-color(base-color: red);
      #align(horizon + center)[
        #text(size: 30pt, fill: cell-color.stroke-color)[
          *–Ø–¥—Ä–æ*
        ]
      ]
    ]

    cetz.draw.content((8, -6.5), (18.5, -12.6))[
      #let cell-color = cell-color(base-color: red);
      #box(width: 100%, height: 100%, fill: cell-color.background-color, stroke: 3pt + cell-color.stroke-color, inset: 20pt)[
        #align(center + horizon)[
          #text(size: 30pt, fill: cell-color.stroke-color)[
            *–î—Ä–∞–π–≤–µ—Ä FUSE*
          ]
        ]
      ]
    ]

    cetz.draw.set-style(content: (padding: .2), stroke: 5pt + black)
    cetz.draw.line((2, -5), (2, -8))
    cetz.draw.line((2, -8), (8, -8), mark: (end: ">"))

    cetz.draw.line((8, -7.5), (2.5, -7.5))
    cetz.draw.line((2.5, -7.5), (2.5, -5), mark: (end: ">"))

    cetz.draw.line((13.75, -6.5), (13.75, -5), mark: (end: ">"))
    cetz.draw.line((13.25, -5), (13.25, -6.5), mark: (end: ">"))
  })
]

#focus-slide[
  #text(size: 50pt)[
    *–°–µ–∞–Ω—Å –º–∞–≥–∏–∏*
  ]
]

#slide(
  header: [–ò –≤—Å—ë –∂–µ, –∑–∞—á–µ–º?], place-location: horizon,
)[
  - #bash("sshfs") : –ø—Ä–æ–µ–∫—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –§–° —á–µ—Ä–µ–∑ #bash("ssh");

  - –°–Ω–∏–∂–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏;

  - –ü–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å *–ø–æ—á—Ç–∏ –ª—é–±—ã–µ –æ–±—Ä–∞–∑—ã –¥–∏—Å–∫–æ–≤*, –Ω–µ –∏–º–µ—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
]

#title-slide[
  #place(horizon + center)[
    = –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!
  ]

  #place(
    bottom + center,
  )[
    // #qr-code("https://github.com/JakMobius/courses/tree/main/mipt-os-basic-2024", width: 5cm)

    #box(
      baseline: 0.2em + 4pt, inset: (x: 15pt, y: 15pt), radius: 5pt, stroke: 3pt + rgb(185, 186, 187), fill: rgb(240, 240, 240),
    )[
      üîó #link(
        "https://github.com/JakMobius/courses/tree/main/mipt-os-basic-2024",
      )[*github.com/JakMobius/courses/tree/main/mipt-os-basic-2024*]
    ]
  ]
]