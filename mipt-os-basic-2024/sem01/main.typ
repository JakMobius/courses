
#import "@preview/polylux:0.3.1": *
#import "@preview/cetz:0.2.2"
#import "../theme/theme.typ": *
#import "./utils.typ": draw-compiler-lifecycle

#show: theme

#title-slide[
  #align(horizon + center)[
    = –ê–ö–û–°

    –ú–§–¢–ò

    12 —Å–µ–Ω—Ç—è–±—Ä—è, 2024
  ]
]

#slide[
  #let row(image-path, link-url, link-text) = [
    #white-box[
      #box(baseline: 7pt)[#image(image-path, width: 30pt)]
      #link(link-url)[#link-text]
    ]
  ]
  #align(center + horizon)[
    –í–∞—à —Å–µ–º–∏–Ω–∞—Ä–∏—Å—Ç:

    #uncover((beginning: 2))[#text(45pt)[–ê—Ä—Ç–µ–º]]

    #uncover((beginning: 2))[–¢–∞–∫ –∏ –∑–∞–ø–∏—à–∏—Ç–µ.]
  ]

  #uncover((beginning: 3))[
    #place(bottom)[
      #row("img/mail.png", "klimov.aiu@phystech.edu")[*klimov.aiu\@phystech.edu*]
    ]
    #place(bottom + right)[
      #row("img/telegram.png", "t.me/prostokvasha")[*\@prostokvasha*]
    ]
  ]
]

#slide(header: [–í–∞—à–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:], place-location: horizon)[

  #box(stroke: (left: black + 4pt), inset: (x: 15pt, y: 15pt))[
    === –ú–æ—Ä–æ–∑–æ–≤ –ê—Ä—Ç–µ–º–∏–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á
    #box(baseline: 7pt, image("img/telegram.png", width: 30pt))
    #link("t.me/tokreal")[
      *\@tokreal*
    ]
  ]

  #box(stroke: (left: black + 4pt), inset: (x: 15pt, y: 15pt))[
    === –ë–æ—è—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á
    #box(baseline: 7pt, image("img/telegram.png", width: 30pt))
    #link("t.me/simpleus")[
      *\@simpleus*
    ]
  ]
]

#plain-slide[
  #align(horizon + center)[
    #image("img/what-is-acos.jpeg", width: 80%)
  ]
]

#slide(
  header: [–ê–ö–û–° –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≥–ª—É–±–∂–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–æ—Ç —ç—Ç–æ:], place-location: horizon + center,
)[
  #set text(size: 25pt)
  #cetz.canvas(
    length: 1cm, {
      import cetz.draw: *

      set-style(
        content: (padding: .2), fill: gray.lighten(70%), stroke: gray.lighten(70%),
      )

      let element(base-color, inner-text) = {
        let background-color = color.mix((base-color, 20%), (white, 80%))
        let stroke-color = color.mix((base-color, 50%), (black, 50%))
        let text-color = stroke-color

        box(
          fill: background-color, radius: 20pt, width: 100%, height: 100%, stroke: 3pt + stroke-color,
        )[
          #align(center + horizon)[
            #text(fill: text-color, font: "Monaco", inner-text)
          ]
        ]
      }

      let width = 4
      let margin = 3
      let arr = (
        (text: "exe", color: blue), (text: "OS", color: red), (text: "–ñ–µ–ª–µ–∑–æ", color: black),
      )

      let x = 0

      set-style(mark: (symbol: ">"), stroke: 3pt + black)

      for step in arr {
        content((x, 4), (x + width, 0), padding: 0)[
          #element(step.color)[#step.text]
        ]

        if x != 0 {
          line((x - margin + 0.1, 2), (x - 0.1, 2))
        }

        x = x + width + margin
      }
    },
  )
]

#focus-slide[
  #text(size: 40pt)[*–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä*]
]

#slide(header: [–û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã], place-location: horizon)[
  - #bash("man") : –º–∞–Ω—É–∞–ª—ã –ø–æ —á–µ–º—É —É–≥–æ–¥–Ω–æ;
    - #bash("man man") : –º–∞–Ω—É–∞–ª—ã –ø–æ –º–∞–Ω—É–∞–ª–∞–º;
  - #bash("touch") : —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª;
  - #bash("mkdir") : —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é;
  - #bash("pwd") : –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
  - #bash("cd") : —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é;
  - #bash("ls") : –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
]

#slide(
  header: [–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏], place-location: horizon,
)[
  - #bash("nano") , #bash("micro") , #bash("vim") , #bash("emacs") : —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
    —Ç–µ–∫—Å—Ç–∞;
  - #bash("less") : –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª—É;
  - #bash("cat") : –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞;
  - #bash("grep") : –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏);
  - #bash("find") : –∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏ / –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è / ...;
  - #bash("mv") : –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å / –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª;
  - #bash("rm") : —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª / –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.
]

#slide(header: [–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏], place-location: horizon)[
  - #bash("gcc") , #bash("clang") : –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã;
  - #bash("gdb") , #bash("lldb") : –æ—Ç–ª–∞–¥—á–∏–∫–∏;
  - #bash("ld") : –∫–æ–º–ø–æ–Ω–æ–≤—â–∏–∫;
  - #bash("strace") : –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.
]

#focus-slide[
  #text(size: 40pt)[*–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–Ω—Å–æ–ª—å—é!*]

  #text(size: 20pt)[–≠—Ç–æ –∫–∞–∂–µ—Ç—Å—è –Ω–µ—É–¥–æ–±–Ω—ã–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≥–æ–¥.]
]

#slide(
  header: [–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç GCC], place-location: horizon + center,
)[
  #cetz.canvas(
    length: 1cm, {
      import cetz.draw: *

      set-style(
        content: (padding: .2), fill: gray.lighten(70%), stroke: gray.lighten(70%),
      )

      let arr = (
        (text: "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", color: blue, width: 5), //
        (
          text: "–ö–æ–¥ –±–µ–∑ –¥–∏—Ä–µ–∫—Ç–∏–≤ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞", code: bash("gcc -E"), color: black, width: 7,
        ), //
        (text: "–ê—Å—Å–µ–º–±–ª–µ—Ä–Ω—ã–π –∫–æ–¥", code: bash("gcc -S"), color: black, width: 7), //
        (text: "–û–±—ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª", code: bash("gcc -c"), color: black, width: 5), //
        (text: "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª", color: blue, width: 6), //
      )

      draw-compiler-lifecycle(arr)
    },
  )
]

#slide(
  header: [–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Clang], place-location: horizon + center,
)[
  #cetz.canvas(
    length: 1cm, {
      import cetz.draw: *

      set-style(
        content: (padding: .2), fill: gray.lighten(70%), stroke: gray.lighten(70%),
      )

      let arr = (
        (text: "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", color: blue, width: 5), //
        (
          text: "–ö–æ–¥ –±–µ–∑ –¥–∏—Ä–µ–∫—Ç–∏–≤ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞", code: bash("clang -E"), color: black, width: 7,
        ), //
        (
          text: "–ë–∞–π—Ç–∫–æ–¥ LLVM", code: bash("clang -S -emit-llvm"), color: black, width: 9,
        ), //
        (text: "–û–±—ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª", code: bash("clang -c"), color: black, width: 5), //
        (text: "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª", color: blue, width: 6), //
      )

      draw-compiler-lifecycle(arr)
    },
  )
]

#slide(
  header: [–î–∏—Ä–µ–∫—Ç–∏–≤—ã –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞], place-location: horizon, background-image: none,
)[

#code(numbers: true)[```c
    #define MACRO 42               // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ—Å–æ–≤
    #include "my-header.h"         // –í–∫–ª—é—á–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–¥–æ–º

    #ifdef WIN32                   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      #error Please, install Linux // –û—à–∏–±–∫–∏
    #endif

    #ifndef DEBUG                   // –£—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è
    void debug_function() { /* noop */ }
    #else
    void debug_function() { printf("debug_function called!\n"); }
    #endif
    ```]

–ú–∞–∫—Ä–æ—Å—ã —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ñ–ª–∞–≥–∞–º–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞: #bash("gcc -D<MACRO_NAME>[=VALUE] ...")
]

#slide(header: [–•–∏—Ç—Ä–æ—Å—Ç–∏ —Å –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º], background-image: none)[

#code(numbers: true)[```c
  #include <stdio.h>
  #include <stdlib.h>

  // –ú–∞–∫—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏ c –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ –∏ –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–æ–∫–∏:
  #define BAIL(message) { \
    printf("%s:%d: Fatal error: %s\n", __FILE__, __LINE__, message); \
    exit(1); }

  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  int* allocate_int_array(int n) {
    int* result = (int*)calloc(n, sizeof(int));
    if(!result) BAIL("Cannot allocate memory");
    return result;
  }
  ```]

#codebox("main.c:12: Fatal error: Cannot allocate memory")
]

#slide(
  header: [–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã], place-location: horizon,
)[
  –§–∞–π–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è *–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º*, –µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ. Linux *–Ω–µ
  —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ*.

  –ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ñ–∞–π–ª, Linux —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –µ–≥–æ –Ω–∞—á–∞–ª–æ:

  - #codebox("0x7f 0x45 0x4c 0x46") : –º–∞–≥–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ELF-—Ñ–∞–π–ª–∞;

  - #codebox("#!/usr/bin/python3") : shebang, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä;

  - –ù–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ - —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —à–µ–ª–ª-—Å–∫—Ä–∏–ø—Ç.
]

#slide(
  header: [#emoji.sparkles –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ #emoji.sparkles], place-location: horizon + center,
)[
  #let formats = (
    (".png", "89 50 4E 47 0D 0A 1A 0A"), (".gif", "GIF87a, GIF89a"), (".jpg, .jpeg", "FF D8 FF"), (".rar", "52 61 72 21 1A 07"), (".pdf", "25 50 44 46 2D"),
  )

  #let rows = formats.map(
    line => (
      text(font: "Monaco")[#line.at(0)], line.at(1).split(", ").map(code => codebox(code)).join(" , "),
    ),
  ).flatten()

  #table(
    columns: (auto, auto), inset: (x: 20pt, y: 10pt), align: horizon, table.header([*–§–æ—Ä–º–∞—Ç*], [*–ó–∞–≥–æ–ª–æ–≤–æ–∫*]), ..rows,
  )

  #white-box[
    üîó #link(
      "https://en.wikipedia.org/wiki/List_of_file_signatures",
    )[*wikipedia.org/wiki/List_of_file_signatures*]
  ]
]

#slide(
  header: [–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏: #bash("make")], place-location: horizon, background-image: none,
)[
  - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤;
  - –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç —Ç–æ, —á—Ç–æ —É—Å—Ç–∞—Ä–µ–ª–æ, –ø–æ–ª—å–∑—É—è—Å—å —è–≤–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.

  #uncover(
    (beginning: 2),
  )[
    *#colbox(color: green)[–ü–ª—é—Å—ã:]*

    - –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ;
    - –ì–∏–±–∫–∏–π, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.
  ]

  #uncover((beginning: 3))[
    *#colbox(color: red)[–ú–∏–Ω—É—Å—ã:]*

    - –ù—É–∂–Ω–æ –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤;
    - ...–ò —Å –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å—é;
    - –ï—Å–ª–∏ –∑–∞–º–æ—Ä–æ—á–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º, –º–µ–π–∫—Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–º.
  ]
]

#slide(
  header: [–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏: #bash("cmake")], place-location: horizon, background-image: none,
)[
  - –°–∫—Ä–∏–ø—Ç–æ–ø–æ–¥–æ–±–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º —Å–±–æ—Ä–∫–∏.

  #uncover((beginning: 2))[
    *#colbox(color: green)[–ü–ª—é—Å—ã:]*

    - –ó–Ω–∞–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º;
    - –£–¥–æ–±–Ω–µ–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ (vcpkg, pkg-config, ...);
    - –°–∞–º —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –º–µ–∂–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
  ]

  #uncover((beginning: 3))[
    *#colbox(color: red)[–ú–∏–Ω—É—Å—ã:]*

    - –ù—É–∂–Ω–æ —É—á–∏—Ç—å —Ü–µ–ª—ã–π –æ—Ç–¥–µ–ª—å–Ω—ã–π —è–∑—ã–∫;
    - –ú–µ–Ω–µ–µ –≥–∏–±–∫–∏–π.
  ]
]

#slide(
  header: [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∫–æ–¥–∞], place-location: horizon, background-image: none,
)[
  - Code Style –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º, –≥–ª–∞–≤–Ω–æ–µ - *–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º*;

  #set par(leading: 12pt)

  #uncover((beginning: 1))[
    - #bash("clang-format") –ø–æ–º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —ç—Ç–∏–º;
  ]

  #uncover((beginning: 2))[
    - –ó–∞ —á–µ–º –æ–Ω *–Ω–µ* —Å–º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å:

      - –ó–∞ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö;
      - –ó–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏;
      - –ó–∞ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫;
      - –ó–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–æ–¥–∞;
      - –ó–∞ –Ω–∞–ª–∏—á–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.
  ]

  #uncover(
    (beginning: 3),
  )[
    - –£–º–Ω—ã–µ IDE –∏ #bash("clang-tidy") –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –∏ —Å —ç—Ç–∏–º, –Ω–æ –ª—É—á—à–µ —Å–ª–µ–¥–∏—Ç—å —Å–∞–º–∏–º;
  ]

  #uncover((beginning: 4))[
    - –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.
  ]
]

#slide(
  header: [–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–µ–±–∞–≥–∞], place-location: horizon,
)[
  #set image(width: 40pt);
  #set box(baseline: 15pt);

  #box[#image("img/weak-doge.png")] #codebox(lang: "c", "printf(\"debug 374\\n\")") :
  –∫–æ–Ω–µ—á–Ω–æ, —Å–ø–æ—Å–æ–±;

  #set image(width: 60pt);

  #uncover(
    (beginning: 2),
  )[
    –ù–æ –∫—É–¥–∞ –ø—Ä–æ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

    #box(baseline: 25pt, inset: (x: 10pt))[#image("img/strong-doge-2.png")] #bash("strace") :
    –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤;

    #box(baseline: 25pt, inset: (x: 10pt))[#image("img/strong-doge.png")] #bash("gdb") –∏–ª–∏ #bash("lldb") :
    –æ—Ç–ª–∞–¥—á–∏–∫–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
  ]
]

#slide(
  header: [–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è gdb], place-location: horizon, background-image: none,
)[
  - –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏: #bash("gdb ./a.out");
    - #codebox(lang: "bash", "run") : –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É;
    - #codebox(lang: "bash", "break <where>") : –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∞;
    - #codebox(lang: "bash", "next") : –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É;
    - #codebox(lang: "bash", "step") : –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä—É;
    - #codebox(lang: "bash", "print <expression>") : –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è;
    - #codebox(lang: "bash", "quit") : –≤—ã–π—Ç–∏ –∏–∑ gdb.
  #let prefixes = ("r", "b", "n", "p", "q")
  - –ö–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—â–∞—Ç—å: (#prefixes.map(p => codebox(p)).join(" , "));
  - #link(
      "https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf",
    )[üîó *GDB cheat-sheet*].
  #colbox(color: gray)[‚ö†Ô∏è] –ù—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: #bash("gcc -g main.c");
]

#slide(
  header: [–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è strace], place-location: horizon, background-image: none,
)[
  - –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –ø–æ–º–æ—â—å—é strace: #bash("strace ./a.out");
  - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    - #bash("strace -e trace=open,exec,... ./a.out") : —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤;
    - #bash("strace -e trace=%file ./a.out") : –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—É —Å —Ñ–∞–π–ª–∞–º–∏;
    - #bash("strace -p <pid>") : –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É;
    - #bash("strace -o output.txt ./a.out") : —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª;
    - #bash("strace -c ./a.out") : —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –≤—ã–∑–æ–≤–∞–º;

  - #link("https://strace.io/")[üîó *Strace docs*]
]

#slide(
  header: "–£—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏...",
  place-location: horizon
)[
  *...—ç—Ç–æ –ø–æ—Ç–µ—Ä—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å:*

  #code[```c
    char* buffer = calloc(1024, 1);
    read(input, buffer, 1024);
    write(output, buffer, 1024);
    // free(buffer);
    buffer = NULL;
  ```]

  #uncover((beginning: 2))[

    *–ú–µ–Ω–µ–µ –æ—á–µ–≤–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä:*

    #code[```c
      buffer = realloc(buffer, 2048);
    ```]

  ]
]

#slide(
  header: "–£—Ç–µ—á–∫–∏ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤",
  place-location: horizon
)[
  #code[```c
    int file = open("input.txt", O_RDONLY);
    read(file, buffer, 1024);
    // close(file)
    file = open("output.txt", O_WRONLY);
    write(file, buffer, 1024);
  ```]

  *–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –∑–∞–Ω–∏–º–∞—é—Ç –ø–∞–º—è—Ç—å –≤ —è–¥—Ä–µ, —Ç–∞–∫ —á—Ç–æ —ç—Ç–æ —Ç–æ–∂–µ —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏.*
]

#slide(
  header: "–ß–µ–º —á–µ—Ä–µ–≤–∞—Ç—ã —É—Ç–µ—á–∫–∏?",
  place-location: horizon
)[
  - *–í —É—Ç–∏–ª–∏—Ç–µ, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–¥–æ–ª–≥–æ* - –Ω–∏—á–µ–º, —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–¥—è—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã;

  - *–í –¥–æ–ª–≥–æ–∂–∏–≤—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ (–≤–µ–±-—Å–µ—Ä–≤–µ—Ä, –∏–≥—Ä–∞, ...)* - —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è;

  - *–í —è–¥—Ä–µ* - –≤—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å—É–¥—å–±—É CrowdStrike;

  #uncover((beginning: 2))[

    - *–í –¥–æ–º–∞—à–∫–µ –ø–æ –ê–ö–û–°—É* - –±–∞–Ω.
  ]
]

#slide(
  header: [–ü–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏: #bash("valgrind")]
)[
  - –≠–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –∞–ª–ª–æ–∫–∞—Ü–∏—è–º–∏;
  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #bash("valgrind your-awesome-program").

  #uncover(
    (beginning: 2),
  )[
    *#colbox(color: green)[–ü–ª—é—Å—ã:]*

    - –ù–∞—Ö–æ–¥–∏—Ç –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–µ–Ω–∏–µ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏).
  ]

  #uncover((beginning: 3))[
    *#colbox(color: red)[–ú–∏–Ω—É—Å—ã:]*

    - –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π (–∑–∞–º–µ–¥–ª—è–µ—Ç –≤ 10-100 —Ä–∞–∑);
    - –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–º–∏.
  ]
]

#slide(
  header: [–ü–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏: LeakSanitizer],
  background-image: none,
)[
  - –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ #bash("clang");
  - –í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–ª–ª–æ–∫–∞—Ü–∏–π –ø—Ä—è–º–æ –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª;
  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: #bash("clang -fsanitize=leak").

  #uncover(
    (beginning: 2),
  )[
    *#colbox(color: green)[–ü–ª—é—Å—ã:]*

    - –ü–æ—á—Ç–∏ –Ω–µ –∑–∞–º–µ–¥–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É;
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å.
  ]

  #uncover((beginning: 3))[
    *#colbox(color: red)[–ú–∏–Ω—É—Å—ã:]*

    - –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ #bash("clang");
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç #codebox("ptrace()") $=>$ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥ –¥–µ–±–∞–≥–≥–µ—Ä–æ–º, –ø–æ–¥ #bash("strace") , –∏ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö.
  ]
]

#slide(
  header: [#codebox("-fsanitize=")]
)[
  - #codebox("address") : –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è, use-after-free, ...);
  - #codebox("thread") : –ø–æ–∏—Å–∫ –≥–æ–Ω–æ–∫;
  - #codebox("undefined") : –ø–æ–∏—Å–∫ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è;
  - #codebox("memory") : –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏;
  - #codebox("leak") : –ø–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏.

  #colbox(color: red)[‚ö†Ô∏è] : *MemorySanitizer –∏ LeakSanitizer –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ #bash("clang").*

  #colbox(color: red)[‚ö†Ô∏è] : *–ù–µ –≤—Å–µ —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º*
]

#focus-slide[
  #text(size: 40pt)[*–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤*]
]

#title-slide[
  #place(horizon + center)[
    = –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!
  ]

  #place(
    bottom + center,
  )[
    // #qr-code("https://github.com/JakMobius/courses/tree/main/mipt-os-basic-2024", width: 5cm)

    #box(
      baseline: 0.2em + 4pt, inset: (x: 15pt, y: 15pt), radius: 5pt, stroke: 3pt + rgb(185, 186, 187), fill: rgb(240, 240, 240),
    )[
      üîó #link(
        "https://github.com/JakMobius/courses/tree/main/mipt-os-basic-2024",
      )[*github.com/JakMobius/courses/tree/main/mipt-os-basic-2024*]
    ]
  ]
]